{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/53.jpg","path":"images/53.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1474467050242},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1474467050355},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1474467050356},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1474467050246},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1474467055633},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1474467050363},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1474467050361},{"_id":"themes/next/_config.yml","hash":"45554df3dd19dc9b0fa5bb6e167d90c1994eaa24","modified":1481648206600},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1474467050244},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1474467050365},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1474467055635},{"_id":"source/_posts/About Hexo.md","hash":"b952458d92cca472ae01456f4de2981488da34c2","modified":1474467395747},{"_id":"source/_posts/JAVA反射的利弊.md","hash":"9400cd2f734cd92de84df2a517ce5f70bf592b50","modified":1481472834658},{"_id":"source/_posts/Java多态理解.md","hash":"35f819dc7e5a118fa6747e02baf0fc8ce3bb54d6","modified":1481730013826},{"_id":"source/_posts/Linux下JVM线程CPU负载过高问题排查.md","hash":"b98c484a3840ba776de89886551721832f3878f3","modified":1481735098528},{"_id":"source/_posts/Log4j使用总结.md","hash":"4d91817e0b062a2d7d2070b5aa0ab0520016929d","modified":1481735007058},{"_id":"source/_posts/My-First-Blog.md","hash":"d356cf57fae5e097ac2052d0984d3935fd0a313f","modified":1481732099739},{"_id":"source/_posts/MyEclipse安装Markdown插件.md","hash":"0d64c860f4472e9fb2601ed022f4a1d86989ea05","modified":1481730733425},{"_id":"source/_posts/PreparingInterview.md","hash":"7c2577b7d9e9e35dfc312eca1902434975f4661f","modified":1483521762279},{"_id":"source/_posts/Vim安装、配置和操作.md","hash":"ffe934b8d65c7dfef6057e0c34b1f83bf2c4fcca","modified":1481734289425},{"_id":"source/_posts/java读写文件大全.md","hash":"acea3f8251e5b9f84d78ffb2f4f5be2a1b139189","modified":1481734921593},{"_id":"source/about/index.md","hash":"2fd601b6d43665465a651fd01e60015340846166","modified":1474561053362},{"_id":"source/categories/index.md","hash":"25ca039b786bdd8721ee213b113ab7ff7fd03654","modified":1474560778906},{"_id":"source/tags/index.md","hash":"e9476ebfc8b7c3b03f719816a7421e3169bbcc52","modified":1474560901659},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1474467050370},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1474467050368},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1474467049143},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1474467049136},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1474467049164},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1474467049158},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1474467049160},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1474467049155},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1474467049151},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1474467049138},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1474467049132},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1474467049141},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1474467049146},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1474467049162},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1474467049153},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1474467049259},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1474467049807},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1474467049263},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1474467050093},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1474467049261},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1474467049810},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1474467049257},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1474467050267},{"_id":"themes/next/source/404.html","hash":"205a341db12a47d6086fc1bac26000c4a16a8562","modified":1474478659490},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1474467050163},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1474467050168},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1474467050166},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474467055472},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1474467050105},{"_id":"themes/next/layout/_macro/post.swig","hash":"f0862e443e1c7b9ef4a6b619b51ba6038a99a567","modified":1474467050110},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1474467050101},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"8aa5212d803670179222dbc80e73eadd7328d8e5","modified":1474467050112},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1474467050098},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1474467050013},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1474467050010},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d749b5b6b48dac6ddf5084e470122b09ce0a215a","modified":1474467050005},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1474467050008},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1474467050018},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1474467049879},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1474467050015},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1474467049343},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1474467049417},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1474467049420},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1474467049265},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1474467050250},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1474467050252},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1474467050248},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1474467053811},{"_id":"themes/next/source/images/53.jpg","hash":"e0c4d975a11bebb3261e31fe86492c11e1bd98f0","modified":1474473324183},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1474467053685},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1474467053692},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1474467053699},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1474467053697},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1474467053702},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1474467053709},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1474467053707},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1474467053678},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1474467053681},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1474467053689},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1474467053687},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1474467053705},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1474467053683},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474467049428},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474467049424},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474467053828},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474467053822},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474467053826},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474467055444},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474467055449},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1474467049812},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1474467049937},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1474467049932},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1474467049935},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1474467049890},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1474467049884},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1474467049886},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1474467049888},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1474467049345},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1474467049431},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1474467049592},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1474467049589},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1474467049587},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1474467049741},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1474467049598},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1474467049595},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1474467053740},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1474467053816},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1474467053825},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1474467055451},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1474467055442},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1474467055448},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1474467055577},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1474467055580},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1474467055587},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1474467055584},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1474467055589},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1474467055591},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1474467055582},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1474467053150},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1474467053156},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1474467050491},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1474467050487},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1474467050484},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1474467050493},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1474467050631},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1474467050634},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1474467050628},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1474467050630},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1474467050636},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1474467053526},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1474467053372},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1474467053374},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1474467053392},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1474467053385},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1474467053389},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1474467053394},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1474467053487},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1474467053474},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1474467053482},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1474467053472},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1474467053477},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1474467053523},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1474467049705},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1474467049712},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a576c23d426ab236eb3dcd0bfe1b3f0b0c54ad1a","modified":1474467049709},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1474467049702},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1474467049695},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1474467049698},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1474467049604},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1474467049602},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1474467054837},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1474467054627},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1474467055278},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1474467055280},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1474467054392},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1474467054833},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1474467055316},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1474467055385},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1474467055382},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1474467055380},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1474467055376},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1474467055387},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1474467054203},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1474467054193},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1474467054212},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1474467054099},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1474467054208},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1474467054102},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1474467054199},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1474467053995},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1474467053997},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1474467054042},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1474467054045},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1474467054048},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1474467053935},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1474467053930},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"049db6edad181ee9cc47bab2ad75e52ca2fabdd2","modified":1481648560409},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1474467053933},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1474467053937},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1474467053942},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1474467053940},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1474467055499},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1474467053104},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1474467053101},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1474467053097},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1474467053108},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1474467052979},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1474467053106},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1474467053115},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1474467053093},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1474467052977},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1474467050496},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1474467050499},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1474467050640},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1474467050638},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1474467050643},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1474467052828},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1474467053296},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1474467053299},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1474467052831},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1474467052834},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1474467052826},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1474467053479},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1474467054839},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1474467054638},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1474467054646},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1474467054632},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1474467054641},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1474467054635},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1474467054460},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1474467054458},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1474467055291},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1474467055282},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1474467055289},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1474467055284},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1474467054405},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1474467054416},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1474467054394},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1474467054397},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1474467054414},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1474467054417},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1474467054410},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1474467054412},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1474467054420},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1474467054399},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1474467054401},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1474467054407},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1474467054775},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1474467054780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1474467054793},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1474467054794},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1474467054785},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1474467054789},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1474467054778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1474467054782},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1474467054791},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1474467055209},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1474467055206},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1474467055210},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1474467055212},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1474467054538},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1474467054544},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1474467054536},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1474467054542},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1474467054546},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1474467054540},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1474467054104},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1474467054214},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1474467053999},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1474467052997},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1474467053002},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1474467052981},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1474467052991},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1474467052983},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1474467052994},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1474467052837},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1474467052839},{"_id":"public/atom.xml","hash":"dee1801bc2b432551422d03210689d7d1fa8adde","modified":1483521782326},{"_id":"public/about/index.html","hash":"51e3b1623fec0f2995dfc3c697ce3e72ab534d78","modified":1483521782351},{"_id":"public/categories/index.html","hash":"fff9383a8166c2864188b1edfc343f802865a9c3","modified":1483521782352},{"_id":"public/tags/index.html","hash":"fc978f256004c529b36a4b9883157e92956cb137","modified":1483521782353},{"_id":"public/archives/2016/08/index.html","hash":"a637b271423e5d154df137a6758122be28128bff","modified":1483521782353},{"_id":"public/archives/2016/09/index.html","hash":"7bdb9223adf9c1c72ebb31a92e5752087c2a0a52","modified":1483521782353},{"_id":"public/categories/Java/index.html","hash":"1b0e268a23ce022e2d757532f4ea34863e924133","modified":1483521782353},{"_id":"public/categories/Linux/index.html","hash":"6862be5eec9214d68e24bf5e936a986f731f476c","modified":1483521782354},{"_id":"public/categories/Hexo/index.html","hash":"30f0ce9553d799254e3a2e69f116497d01b6539d","modified":1483521782354},{"_id":"public/categories/Markdown/index.html","hash":"a0c8addd8550c60fddd53fde2f439368ebfa9c95","modified":1483521782354},{"_id":"public/categories/面试/index.html","hash":"8388040030857ffecffa97ba05498f9481c650f1","modified":1483521782355},{"_id":"public/categories/Linux/JVM/index.html","hash":"950b7096708ff841d5086507007b119be62e6a38","modified":1483521782355},{"_id":"public/categories/Hexo/Markdown/index.html","hash":"53fc3087950d7c339fa7814a813c678de20cef27","modified":1483521782355},{"_id":"public/tags/Java反射/index.html","hash":"88f67318795b27dcfff673e0f870c63d5b9f8117","modified":1483521782355},{"_id":"public/tags/Java多态/index.html","hash":"805c1c8bca821c637736aa7cf53fc3dab562deb8","modified":1483521782355},{"_id":"public/tags/log4j日志框架/index.html","hash":"645022041e327ee1413438a9b7c3e1848ad654e3","modified":1483521782355},{"_id":"public/tags/JVM/index.html","hash":"c1af29e4e080a3e16620378efbd2ce16062db7f8","modified":1483521782355},{"_id":"public/tags/Hexo教程/index.html","hash":"c1ce9ca97bd152b485e98d81563dfdc94255d9ba","modified":1483521782355},{"_id":"public/tags/Markdown语法/index.html","hash":"9a187c932faf99b73edc4db618185b2eb4e79a29","modified":1483521782355},{"_id":"public/tags/Markdown插件/index.html","hash":"11b1595bd603976e8c5688dc905916af4e3ecb48","modified":1483521782355},{"_id":"public/tags/Vim/index.html","hash":"55c0cf51c8e8d8b54fa82b1075169a37f15e732d","modified":1483521782356},{"_id":"public/tags/java文件读写/index.html","hash":"0818d7612ce1d47f8a46ab6eb6c26bf91d7c9cc8","modified":1483521782356},{"_id":"public/2016/12/15/PreparingInterview/index.html","hash":"f24170ea4b42445d72b6470c8bb23ef188752ff5","modified":1483521782356},{"_id":"public/2016/12/15/Vim安装、配置和操作/index.html","hash":"aa0862787c94be5ef9b9f419f49fe9ee4ad01be2","modified":1483521782356},{"_id":"public/2016/12/14/Log4j使用总结/index.html","hash":"3aba4eeb10be348fe1c1e1587e77d01be8133b26","modified":1483521782356},{"_id":"public/2016/12/14/java读写文件大全/index.html","hash":"4e3efb544c6a5e19f83b16daf6b802010913bd9f","modified":1483521782356},{"_id":"public/2016/12/14/Java多态理解/index.html","hash":"3150362752e30e20b1ddff38b5130935026d70f4","modified":1483521782356},{"_id":"public/2016/12/10/MyEclipse安装Markdown插件/index.html","hash":"b40db842c8d418b29a14a82a661278fe39f92d39","modified":1483521782356},{"_id":"public/2016/12/08/Linux下JVM线程CPU负载过高问题排查/index.html","hash":"16c8c4acc59541b3bb806c005579d438c0e8b513","modified":1483521782356},{"_id":"public/2016/09/30/JAVA反射的利弊/index.html","hash":"ee8f1577b7551014e32e4a72d86684749e28a910","modified":1483521782357},{"_id":"public/2016/09/20/About Hexo/index.html","hash":"510ca47647fa46e33944eb3f25976a754e81df64","modified":1483521782357},{"_id":"public/2016/08/20/My-First-Blog/index.html","hash":"707e74df9f2d898a0222b3378283b901d14eb8ce","modified":1483521782357},{"_id":"public/archives/index.html","hash":"388224d6deb4e61f2b89d34e79e846810792b934","modified":1483521782357},{"_id":"public/archives/2016/index.html","hash":"22a454170342b6dd59033287bbd9b5a7d22e01fc","modified":1483521782357},{"_id":"public/archives/2016/12/index.html","hash":"eeb6ac24e28b4560a22bda15e97b7f195609fccd","modified":1483521782357},{"_id":"public/index.html","hash":"250d82ad45ce14eb0e67896361a050482faf84ec","modified":1483521782357},{"_id":"public/images/53.jpg","hash":"e0c4d975a11bebb3261e31fe86492c11e1bd98f0","modified":1483521782400},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1483521782400},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1483521782401},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1483521782401},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1483521782401},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1483521782401},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1483521782402},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1483521782402},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1483521782402},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483521782402},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1483521782402},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1483521782402},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1483521782402},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1483521782402},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1483521782402},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1483521782402},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1483521782402},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1483521782402},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1483521782402},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1483521782403},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1483521782403},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1483521782403},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1483521782403},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1483521782403},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1483521782403},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1483521783583},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1483521783586},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1483521783588},{"_id":"public/404.html","hash":"f73d05108afea796a99b65c78a3e26742d007eb8","modified":1483521783598},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1483521783598},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1483521783598},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1483521783598},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1483521783598},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1483521783598},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1483521783598},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1483521783598},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1483521783598},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1483521783598},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1483521783598},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1483521783598},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1483521783599},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1483521783600},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1483521783600},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1483521783600},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1483521783601},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1483521783601},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1483521783601},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1483521783601},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1483521783601},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1483521783602},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1483521783602},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1483521783602},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1483521783602},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1483521783602},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1483521783602},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1483521783602},{"_id":"public/css/main.css","hash":"125f3784c34281e66c9a34d7c9682dc2b3aeda89","modified":1483521783602},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1483521783602},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1483521783602},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1483521783602},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1483521783602},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1483521783602},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1483521783603},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1483521783603},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1483521783603},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1483521783603},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1483521783603},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1483521783665}],"Category":[{"name":"Java","_id":"cixiqkb0u00061ou7ljal1uoa"},{"name":"Linux","_id":"cixiqkb1z000n1ou7et1tywn6"},{"name":"Hexo","_id":"cixiqkb26000r1ou764ufakwc"},{"name":"-Markdown","_id":"cixiqkb28000v1ou7u88lk7lz"},{"name":"面试","_id":"cixiqkb29000x1ou7jlqr43dt"},{"name":"JVM","parent":"cixiqkb1z000n1ou7et1tywn6","_id":"cixiqkb2m00151ou7djonuknl"},{"name":"Markdown","parent":"cixiqkb26000r1ou764ufakwc","_id":"cixiqkb2t00191ou7eax3k3or"}],"Data":[],"Page":[{"title":"about","date":"2016-09-22T16:17:33.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-09-23 00:17:33\n---\n","updated":"2016-09-22T16:17:33.362Z","path":"about/index.html","comments":1,"layout":"page","_id":"cixiqkb0e00011ou7ltlz9y3x","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-09-22T16:11:25.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-09-23 00:11:25\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-09-22T16:12:58.906Z","path":"categories/index.html","layout":"page","_id":"cixiqkb0k00031ou7h32u2h9l","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-09-22T16:14:28.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-23 00:14:28\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-09-22T16:15:01.659Z","path":"tags/index.html","layout":"page","_id":"cixiqkb0r00051ou7116kh08v","content":"","excerpt":"","more":""}],"Post":[{"title":"About Hexo","date":"2016-09-20T15:44:05.000Z","_content":"[Hexo](https://hexo.io/) is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/About Hexo.md","raw":"---\ntitle: About Hexo\ndate: 2016-09-20 23:44:05\n---\n[Hexo](https://hexo.io/) is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"About Hexo","published":1,"updated":"2016-09-21T14:16:35.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb0700001ou7phra2jgt","content":"<p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p><a href=\"https://hexo.io/\">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"JAVA反射的利弊","date":"2016-09-30T09:44:05.000Z","type":"tags","_content":"### 关于JAVA反射\n反射给java提供了，运行时获取一个类实例的可能，这一点非常灵活，你仅仅传一个类的全包名路径，就能通过反射，来获取对应的类实例，我们一般会用Class类，来调用这个被反射的Objcet类下的，构造方法，属性，或方法等，反射在一些开源框架里用的非常之多，Spring，Struts，Hibnerate，MyBatics都有它的影子，反射虽然很灵活，能够使得写的代码，变的大幅精简，所以在用的时候，一定要注意具体的应用场景，反射的优缺点如下：\n\n### 优点： \n\n（1）能够运行时动态获取类的实例，大大提高系统的灵活性和扩展性。 \n（2）与Java动态编译相结合，可以实现无比强大的功能 \n\n### 缺点： \n（1）使用反射的性能较低 \n（2）使用反射相对来说不安全 \n（3）破坏了类的封装性，可以通过反射获取这个类的私有方法和属性 \n\n任何事物，都有两面性，反射的优点，也同是就是它的缺点，所以，没有好与坏，只有最合适的场景，一阴一阳，才是天道平衡的条件。 \n [ref](https://my.oschina.net/u/1027043/blog/402458)\n","source":"_posts/JAVA反射的利弊.md","raw":"---\ntitle: JAVA反射的利弊\ndate: 2016-09-30 17:44:05\ntags: \n\t- Java反射\ntype: \"tags\"\ncategories: \n\t- Java\n---\n### 关于JAVA反射\n反射给java提供了，运行时获取一个类实例的可能，这一点非常灵活，你仅仅传一个类的全包名路径，就能通过反射，来获取对应的类实例，我们一般会用Class类，来调用这个被反射的Objcet类下的，构造方法，属性，或方法等，反射在一些开源框架里用的非常之多，Spring，Struts，Hibnerate，MyBatics都有它的影子，反射虽然很灵活，能够使得写的代码，变的大幅精简，所以在用的时候，一定要注意具体的应用场景，反射的优缺点如下：\n\n### 优点： \n\n（1）能够运行时动态获取类的实例，大大提高系统的灵活性和扩展性。 \n（2）与Java动态编译相结合，可以实现无比强大的功能 \n\n### 缺点： \n（1）使用反射的性能较低 \n（2）使用反射相对来说不安全 \n（3）破坏了类的封装性，可以通过反射获取这个类的私有方法和属性 \n\n任何事物，都有两面性，反射的优点，也同是就是它的缺点，所以，没有好与坏，只有最合适的场景，一阴一阳，才是天道平衡的条件。 \n [ref](https://my.oschina.net/u/1027043/blog/402458)\n","slug":"JAVA反射的利弊","published":1,"updated":"2016-12-11T16:13:54.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb0h00021ou7ysu0hx7n","content":"<h3 id=\"关于JAVA反射\"><a href=\"#关于JAVA反射\" class=\"headerlink\" title=\"关于JAVA反射\"></a>关于JAVA反射</h3><p>反射给java提供了，运行时获取一个类实例的可能，这一点非常灵活，你仅仅传一个类的全包名路径，就能通过反射，来获取对应的类实例，我们一般会用Class类，来调用这个被反射的Objcet类下的，构造方法，属性，或方法等，反射在一些开源框架里用的非常之多，Spring，Struts，Hibnerate，MyBatics都有它的影子，反射虽然很灵活，能够使得写的代码，变的大幅精简，所以在用的时候，一定要注意具体的应用场景，反射的优缺点如下：</p>\n<h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><p>（1）能够运行时动态获取类的实例，大大提高系统的灵活性和扩展性。<br>（2）与Java动态编译相结合，可以实现无比强大的功能 </p>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><p>（1）使用反射的性能较低<br>（2）使用反射相对来说不安全<br>（3）破坏了类的封装性，可以通过反射获取这个类的私有方法和属性 </p>\n<p>任何事物，都有两面性，反射的优点，也同是就是它的缺点，所以，没有好与坏，只有最合适的场景，一阴一阳，才是天道平衡的条件。<br> <a href=\"https://my.oschina.net/u/1027043/blog/402458\" target=\"_blank\" rel=\"external\">ref</a></p>\n","excerpt":"","more":"<h3 id=\"关于JAVA反射\"><a href=\"#关于JAVA反射\" class=\"headerlink\" title=\"关于JAVA反射\"></a>关于JAVA反射</h3><p>反射给java提供了，运行时获取一个类实例的可能，这一点非常灵活，你仅仅传一个类的全包名路径，就能通过反射，来获取对应的类实例，我们一般会用Class类，来调用这个被反射的Objcet类下的，构造方法，属性，或方法等，反射在一些开源框架里用的非常之多，Spring，Struts，Hibnerate，MyBatics都有它的影子，反射虽然很灵活，能够使得写的代码，变的大幅精简，所以在用的时候，一定要注意具体的应用场景，反射的优缺点如下：</p>\n<h3 id=\"优点：\"><a href=\"#优点：\" class=\"headerlink\" title=\"优点：\"></a>优点：</h3><p>（1）能够运行时动态获取类的实例，大大提高系统的灵活性和扩展性。<br>（2）与Java动态编译相结合，可以实现无比强大的功能 </p>\n<h3 id=\"缺点：\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h3><p>（1）使用反射的性能较低<br>（2）使用反射相对来说不安全<br>（3）破坏了类的封装性，可以通过反射获取这个类的私有方法和属性 </p>\n<p>任何事物，都有两面性，反射的优点，也同是就是它的缺点，所以，没有好与坏，只有最合适的场景，一阴一阳，才是天道平衡的条件。<br> <a href=\"https://my.oschina.net/u/1027043/blog/402458\">ref</a></p>\n"},{"title":"Java多态理解","date":"2016-12-13T16:14:45.000Z","_content":"```\n/* \n对象的多态性：动物 x = new 猫(); \n函数的多态性：函数重载、重写 \n \n1、多态的体现 \n        父类的引用指向了自己的子类对象 \n        父类的引用也可以接收自己的对象 \n2、多态的前提 \n        必须是类与类之间只有关系，要么继承或实现 \n        通常还有一个前提，存在覆盖 \n3、多态的好处 \n        多态的出现大大的提高了程序的扩展性 \n4、多态的弊端 \n        只能使用父类的引用访问父类的成员 \n5、多态的应用 \n \n6、注意事项 \n\n*/  \n  猫extends动物类时，动物的普通属性、方法（指未在）\n/* \n需求： \n猫，狗。 \n*/  \n  \nabstract class Animal  \n{  \n    abstract void eat();  \n}  \n  \nclass Cat extends Animal  \n{  \n    public void eat()  \n    {  \n        System.out.println(\"吃鱼\");  \n    }  \n    public void catchMouse()  \n    {  \n        System.out.println(\"抓老鼠\");  \n    }  \n}  \n  \nclass Dog extends Animal  \n{  \n    public void eat()  \n    {  \n        System.out.println(\"吃骨头\");  \n    }  \n    public void kanJia()  \n    {  \n        System.out.println(\"看家\");  \n    }  \n}  \n  \nclass DuoTaiDemo  \n{  \n    public static void main(String[] args)  \n    {  \n        function(new Cat());  \n        function(new Dog());  \n          \n        Animal a = new Cat();//向上转型  \n        a.eat();  \n          \n        Cat c = (Cat)a;//向下转型  \n        c.catchMouse();  \n          \n          \n    }  \n      \n    public static void function(Animal a)  \n    {  \n        a.eat();  \n        //用于子类型有限  \n        //或判断所属类型进而使用其特有方法  \n        if(a instanceof Cat)  \n        {  \n            Cat c = (Cat)a;  \n            c.catchMouse();  \n        }  \n        else if(a instanceof Dog)  \n        {  \n            Dog c = (Dog)a;  \n            c.kanJia();  \n        }  \n    }  \n      \n      \n}     \n```\n\n`key：向上转型、向下转型、instanceof`  \n  \n[来源:](http://blog.csdn.net/cyq1028/article/details/6879088)\n\n","source":"_posts/Java多态理解.md","raw":"---\ntitle: Java多态理解\ndate: 2016-12-14 00:14:45\ntags:\n\t- Java多态\ncategories: \n\t- Java\t\n---\n```\n/* \n对象的多态性：动物 x = new 猫(); \n函数的多态性：函数重载、重写 \n \n1、多态的体现 \n        父类的引用指向了自己的子类对象 \n        父类的引用也可以接收自己的对象 \n2、多态的前提 \n        必须是类与类之间只有关系，要么继承或实现 \n        通常还有一个前提，存在覆盖 \n3、多态的好处 \n        多态的出现大大的提高了程序的扩展性 \n4、多态的弊端 \n        只能使用父类的引用访问父类的成员 \n5、多态的应用 \n \n6、注意事项 \n\n*/  \n  猫extends动物类时，动物的普通属性、方法（指未在）\n/* \n需求： \n猫，狗。 \n*/  \n  \nabstract class Animal  \n{  \n    abstract void eat();  \n}  \n  \nclass Cat extends Animal  \n{  \n    public void eat()  \n    {  \n        System.out.println(\"吃鱼\");  \n    }  \n    public void catchMouse()  \n    {  \n        System.out.println(\"抓老鼠\");  \n    }  \n}  \n  \nclass Dog extends Animal  \n{  \n    public void eat()  \n    {  \n        System.out.println(\"吃骨头\");  \n    }  \n    public void kanJia()  \n    {  \n        System.out.println(\"看家\");  \n    }  \n}  \n  \nclass DuoTaiDemo  \n{  \n    public static void main(String[] args)  \n    {  \n        function(new Cat());  \n        function(new Dog());  \n          \n        Animal a = new Cat();//向上转型  \n        a.eat();  \n          \n        Cat c = (Cat)a;//向下转型  \n        c.catchMouse();  \n          \n          \n    }  \n      \n    public static void function(Animal a)  \n    {  \n        a.eat();  \n        //用于子类型有限  \n        //或判断所属类型进而使用其特有方法  \n        if(a instanceof Cat)  \n        {  \n            Cat c = (Cat)a;  \n            c.catchMouse();  \n        }  \n        else if(a instanceof Dog)  \n        {  \n            Dog c = (Dog)a;  \n            c.kanJia();  \n        }  \n    }  \n      \n      \n}     \n```\n\n`key：向上转型、向下转型、instanceof`  \n  \n[来源:](http://blog.csdn.net/cyq1028/article/details/6879088)\n\n","slug":"Java多态理解","published":1,"updated":"2016-12-14T15:40:13.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb0n00041ou70592xae8","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\">对象的多态性：动物 x = new 猫(); </div><div class=\"line\">函数的多态性：函数重载、重写 </div><div class=\"line\"> </div><div class=\"line\">1、多态的体现 </div><div class=\"line\">        父类的引用指向了自己的子类对象 </div><div class=\"line\">        父类的引用也可以接收自己的对象 </div><div class=\"line\">2、多态的前提 </div><div class=\"line\">        必须是类与类之间只有关系，要么继承或实现 </div><div class=\"line\">        通常还有一个前提，存在覆盖 </div><div class=\"line\">3、多态的好处 </div><div class=\"line\">        多态的出现大大的提高了程序的扩展性 </div><div class=\"line\">4、多态的弊端 </div><div class=\"line\">        只能使用父类的引用访问父类的成员 </div><div class=\"line\">5、多态的应用 </div><div class=\"line\"> </div><div class=\"line\">6、注意事项 </div><div class=\"line\"></div><div class=\"line\">*/  </div><div class=\"line\">  猫extends动物类时，动物的普通属性、方法（指未在）</div><div class=\"line\">/* </div><div class=\"line\">需求： </div><div class=\"line\">猫，狗。 </div><div class=\"line\">*/  </div><div class=\"line\">  </div><div class=\"line\">abstract class Animal  </div><div class=\"line\">&#123;  </div><div class=\"line\">    abstract void eat();  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">class Cat extends Animal  </div><div class=\"line\">&#123;  </div><div class=\"line\">    public void eat()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;吃鱼&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    public void catchMouse()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;抓老鼠&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">class Dog extends Animal  </div><div class=\"line\">&#123;  </div><div class=\"line\">    public void eat()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;吃骨头&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    public void kanJia()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;看家&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">class DuoTaiDemo  </div><div class=\"line\">&#123;  </div><div class=\"line\">    public static void main(String[] args)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        function(new Cat());  </div><div class=\"line\">        function(new Dog());  </div><div class=\"line\">          </div><div class=\"line\">        Animal a = new Cat();//向上转型  </div><div class=\"line\">        a.eat();  </div><div class=\"line\">          </div><div class=\"line\">        Cat c = (Cat)a;//向下转型  </div><div class=\"line\">        c.catchMouse();  </div><div class=\"line\">          </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public static void function(Animal a)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        a.eat();  </div><div class=\"line\">        //用于子类型有限  </div><div class=\"line\">        //或判断所属类型进而使用其特有方法  </div><div class=\"line\">        if(a instanceof Cat)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            Cat c = (Cat)a;  </div><div class=\"line\">            c.catchMouse();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(a instanceof Dog)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            Dog c = (Dog)a;  </div><div class=\"line\">            c.kanJia();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>key：向上转型、向下转型、instanceof</code>  </p>\n<p><a href=\"http://blog.csdn.net/cyq1028/article/details/6879088\" target=\"_blank\" rel=\"external\">来源:</a></p>\n","excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/* </div><div class=\"line\">对象的多态性：动物 x = new 猫(); </div><div class=\"line\">函数的多态性：函数重载、重写 </div><div class=\"line\"> </div><div class=\"line\">1、多态的体现 </div><div class=\"line\">        父类的引用指向了自己的子类对象 </div><div class=\"line\">        父类的引用也可以接收自己的对象 </div><div class=\"line\">2、多态的前提 </div><div class=\"line\">        必须是类与类之间只有关系，要么继承或实现 </div><div class=\"line\">        通常还有一个前提，存在覆盖 </div><div class=\"line\">3、多态的好处 </div><div class=\"line\">        多态的出现大大的提高了程序的扩展性 </div><div class=\"line\">4、多态的弊端 </div><div class=\"line\">        只能使用父类的引用访问父类的成员 </div><div class=\"line\">5、多态的应用 </div><div class=\"line\"> </div><div class=\"line\">6、注意事项 </div><div class=\"line\"></div><div class=\"line\">*/  </div><div class=\"line\">  猫extends动物类时，动物的普通属性、方法（指未在）</div><div class=\"line\">/* </div><div class=\"line\">需求： </div><div class=\"line\">猫，狗。 </div><div class=\"line\">*/  </div><div class=\"line\">  </div><div class=\"line\">abstract class Animal  </div><div class=\"line\">&#123;  </div><div class=\"line\">    abstract void eat();  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">class Cat extends Animal  </div><div class=\"line\">&#123;  </div><div class=\"line\">    public void eat()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;吃鱼&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    public void catchMouse()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;抓老鼠&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">class Dog extends Animal  </div><div class=\"line\">&#123;  </div><div class=\"line\">    public void eat()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;吃骨头&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    public void kanJia()  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        System.out.println(&quot;看家&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">  </div><div class=\"line\">class DuoTaiDemo  </div><div class=\"line\">&#123;  </div><div class=\"line\">    public static void main(String[] args)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        function(new Cat());  </div><div class=\"line\">        function(new Dog());  </div><div class=\"line\">          </div><div class=\"line\">        Animal a = new Cat();//向上转型  </div><div class=\"line\">        a.eat();  </div><div class=\"line\">          </div><div class=\"line\">        Cat c = (Cat)a;//向下转型  </div><div class=\"line\">        c.catchMouse();  </div><div class=\"line\">          </div><div class=\"line\">          </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">    public static void function(Animal a)  </div><div class=\"line\">    &#123;  </div><div class=\"line\">        a.eat();  </div><div class=\"line\">        //用于子类型有限  </div><div class=\"line\">        //或判断所属类型进而使用其特有方法  </div><div class=\"line\">        if(a instanceof Cat)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            Cat c = (Cat)a;  </div><div class=\"line\">            c.catchMouse();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        else if(a instanceof Dog)  </div><div class=\"line\">        &#123;  </div><div class=\"line\">            Dog c = (Dog)a;  </div><div class=\"line\">            c.kanJia();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">      </div><div class=\"line\">      </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>key：向上转型、向下转型、instanceof</code>  </p>\n<p><a href=\"http://blog.csdn.net/cyq1028/article/details/6879088\">来源:</a></p>\n"},{"title":"Log4j使用总结","date":"2016-12-13T16:17:48.000Z","_content":"Log4j是apache的一个开源项目，用来操作程序日志信息的框架。因便于管理，在工程中用来代替System.out打印语句。通过配置Log4j中的log4j.properties，可以指定日志信息的级别，输出地点，输出格式。\n##### 一、LOG4J组成  \n Log4j的有3大主要组件：\n      1，Logger:记录器，决定什么日志信息应该被输出、什么日志信息应该被忽略。\n      2，Appender:存放器，指定日志信息应该输出到什么地方，可以是控制台、文件、网络设备。\n      3，Layout:布局格式，指定日志信息的输出格式。\n   一个logger可以用多个appender，也就是说日志信息可以同时输出到多个设备上，每个appender对应一种layout。\n   所以,记录器用来整合日志信息，一个日志信息调整好以后，交给记录器的所有存放器，每一个存放器根据自己的格式输出日志信息。\n##### 二、记录器组件Logger\n   1.根记录器 ： rootLogger\n     配置语法 ：log4j.rootLogger = [日志级别],存放器名1,存放器名2, ... ,存放器名N\n     日志级别 ：级别由高到低依次是：fatal、error、warn、info、debug。\n     项目中代码：\n          `log4j.rootLogger=INFO, stdout, logfile`\n      跟记录器的日子级别是info,所以info，warn,error,fatal均会被执行。stdout,logfile是存放器。\n   2. 在配置文件中配置Logger组件\n      可在Log4J配置文件中配置自己的Logger组件\n      项目中代码：\n      ```\n      log4j.logger.Application=INFO,Application\n      log4j.logger.Service=DEBUG,Service\n      log4j.logger.jdbc=INFO,jdbc\n      log4j.logger.Action=INFO,Action\n      ```\n      定义了application,service,jdbc,action四个自己的logger组件，并分别配置了级别和存放器。\n##### 三、存放器组件Appender\n    配置语法 ：\n         log4j.appender.存放器名 = 存放类\n         log4j.appender.存放器名.option1 = value1\n     存放类：\n     \t```\n \t\torg.apache.log4j.ConsoleAppender         控制台输出\n        org.apache.log4j.FileAppender          文件\n        org.apache.log4j.DailyRollingFileAppender 每天产生一个日志文件\n        org.apache.log4j.RollingFileAppender  文件大小到达指定尺寸的时候产生一个新的文件\n        org.apache.log4j.WriterAppender   将日志信息以流格式发送到任意指定的地方\n        ```\n    项目中代码：\n\t\t```      \n    \t Application记录器：\n         log4j.appender.Application=org.apache.log4j.RollingFileAppender\n         log4j.appender.Application.encoding=UTF-8\n         log4j.appender.Application.File=/imagesys/logs/ImageCreditServer/ApplicationLog.log\n         log4j.appender.Service.MaxFileSize=10240KB      \n       Service记录器：\n          log4j.appender.Service=org.apache.log4j.RollingFileAppender\n          log4j.appender.Service.encoding=UTF-8\n          log4j.appender.Service.File=/imagesys/logs/ImageCreditServer/ServiceLog.log\n          log4j.appender.Service.MaxFileSize=10240KB\n        jdbc记录器：\n          log4j.appender.jdbc=org.apache.log4j.RollingFileAppender\n          log4j.appender.jdbc.encoding=UTF-8\n          log4j.appender.jdbc.File=/imagesys/logs/ImageCreditServer/jdbcLog.log \n          log4j.appender.jdbc.MaxFileSize=1024KB\n        action记录器：\n          log4j.appender.Action=org.apache.log4j.RollingFileAppender\n          log4j.appender.Action.encoding=UTF-8\n          log4j.appender.Action.File=/imagesys/logs/ImageCreditServer/ActionLog.log\n          log4j.appender.Action.MaxFileSize=10240KB\n          ```\n  分别制定了输出文件的存放类，编码方式，文件路径，文件大小。\n#####  四、格式化组件Layout\n       配置语法 ：\n       log4j.appender.存放器名.layout = 格式类\n       log4j.appender.存放器名.layout.option1 = value1\n        … …\n       log4j.appender.存放器名.layout.optionN = valueN\n       输出格式类型：\n       . org.apache.log4j.HTMLLayout(以HTML表格形式布局);\n       . org.apache.log4j.PatternLayout(可以灵活地指定布局模式);\n       . org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串);\n       . org.apache.log4j.TTCCLayout(包含日志产生的时间、线程和类别等信息);\n       打印参数如下：\n%m：输出代码中指定的消息。\n%p：输出优先级。\n%r：输入自应用启动到输出该log信息耗费的毫秒数。\n%c：输出所属的类目，通常就是所在类的全名。\n%t：输出产生该日志线程的线程名。\n%n：输出一个回车换行符。Windows平台为“\\r\\n”，UNIX为“\\n”。\n%d：输出日志时间点的日期或时间，默认格式为ISO8601，推荐使用“%d{ABSOLUTE}”，这个输出格式形如：“2007-05-07 18:23:23,500”，符合中国人习惯。\n%l：输出日志事件发生的位置，包括类名、线程名，以及所在代码的行数。\n        项目中代码： \n       ```\n       log4j.appender.Application.layout=org.apache.log4j.PatternLayout\n       log4j.appender.Application.layout.ConversionPattern=%d %p [%c] - %m%n\n       ```\n       以自定义的格式输出日志信息。 \n\n[来源](http://blog.csdn.net/zdwzzu2006/article/details/6102145)\n ","source":"_posts/Log4j使用总结.md","raw":"---\ntitle: Log4j使用总结\ndate: 2016-12-14 00:17:48\ntags:\n\t- log4j日志框架\ncategories: \n\t- Java\t\n---\nLog4j是apache的一个开源项目，用来操作程序日志信息的框架。因便于管理，在工程中用来代替System.out打印语句。通过配置Log4j中的log4j.properties，可以指定日志信息的级别，输出地点，输出格式。\n##### 一、LOG4J组成  \n Log4j的有3大主要组件：\n      1，Logger:记录器，决定什么日志信息应该被输出、什么日志信息应该被忽略。\n      2，Appender:存放器，指定日志信息应该输出到什么地方，可以是控制台、文件、网络设备。\n      3，Layout:布局格式，指定日志信息的输出格式。\n   一个logger可以用多个appender，也就是说日志信息可以同时输出到多个设备上，每个appender对应一种layout。\n   所以,记录器用来整合日志信息，一个日志信息调整好以后，交给记录器的所有存放器，每一个存放器根据自己的格式输出日志信息。\n##### 二、记录器组件Logger\n   1.根记录器 ： rootLogger\n     配置语法 ：log4j.rootLogger = [日志级别],存放器名1,存放器名2, ... ,存放器名N\n     日志级别 ：级别由高到低依次是：fatal、error、warn、info、debug。\n     项目中代码：\n          `log4j.rootLogger=INFO, stdout, logfile`\n      跟记录器的日子级别是info,所以info，warn,error,fatal均会被执行。stdout,logfile是存放器。\n   2. 在配置文件中配置Logger组件\n      可在Log4J配置文件中配置自己的Logger组件\n      项目中代码：\n      ```\n      log4j.logger.Application=INFO,Application\n      log4j.logger.Service=DEBUG,Service\n      log4j.logger.jdbc=INFO,jdbc\n      log4j.logger.Action=INFO,Action\n      ```\n      定义了application,service,jdbc,action四个自己的logger组件，并分别配置了级别和存放器。\n##### 三、存放器组件Appender\n    配置语法 ：\n         log4j.appender.存放器名 = 存放类\n         log4j.appender.存放器名.option1 = value1\n     存放类：\n     \t```\n \t\torg.apache.log4j.ConsoleAppender         控制台输出\n        org.apache.log4j.FileAppender          文件\n        org.apache.log4j.DailyRollingFileAppender 每天产生一个日志文件\n        org.apache.log4j.RollingFileAppender  文件大小到达指定尺寸的时候产生一个新的文件\n        org.apache.log4j.WriterAppender   将日志信息以流格式发送到任意指定的地方\n        ```\n    项目中代码：\n\t\t```      \n    \t Application记录器：\n         log4j.appender.Application=org.apache.log4j.RollingFileAppender\n         log4j.appender.Application.encoding=UTF-8\n         log4j.appender.Application.File=/imagesys/logs/ImageCreditServer/ApplicationLog.log\n         log4j.appender.Service.MaxFileSize=10240KB      \n       Service记录器：\n          log4j.appender.Service=org.apache.log4j.RollingFileAppender\n          log4j.appender.Service.encoding=UTF-8\n          log4j.appender.Service.File=/imagesys/logs/ImageCreditServer/ServiceLog.log\n          log4j.appender.Service.MaxFileSize=10240KB\n        jdbc记录器：\n          log4j.appender.jdbc=org.apache.log4j.RollingFileAppender\n          log4j.appender.jdbc.encoding=UTF-8\n          log4j.appender.jdbc.File=/imagesys/logs/ImageCreditServer/jdbcLog.log \n          log4j.appender.jdbc.MaxFileSize=1024KB\n        action记录器：\n          log4j.appender.Action=org.apache.log4j.RollingFileAppender\n          log4j.appender.Action.encoding=UTF-8\n          log4j.appender.Action.File=/imagesys/logs/ImageCreditServer/ActionLog.log\n          log4j.appender.Action.MaxFileSize=10240KB\n          ```\n  分别制定了输出文件的存放类，编码方式，文件路径，文件大小。\n#####  四、格式化组件Layout\n       配置语法 ：\n       log4j.appender.存放器名.layout = 格式类\n       log4j.appender.存放器名.layout.option1 = value1\n        … …\n       log4j.appender.存放器名.layout.optionN = valueN\n       输出格式类型：\n       . org.apache.log4j.HTMLLayout(以HTML表格形式布局);\n       . org.apache.log4j.PatternLayout(可以灵活地指定布局模式);\n       . org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串);\n       . org.apache.log4j.TTCCLayout(包含日志产生的时间、线程和类别等信息);\n       打印参数如下：\n%m：输出代码中指定的消息。\n%p：输出优先级。\n%r：输入自应用启动到输出该log信息耗费的毫秒数。\n%c：输出所属的类目，通常就是所在类的全名。\n%t：输出产生该日志线程的线程名。\n%n：输出一个回车换行符。Windows平台为“\\r\\n”，UNIX为“\\n”。\n%d：输出日志时间点的日期或时间，默认格式为ISO8601，推荐使用“%d{ABSOLUTE}”，这个输出格式形如：“2007-05-07 18:23:23,500”，符合中国人习惯。\n%l：输出日志事件发生的位置，包括类名、线程名，以及所在代码的行数。\n        项目中代码： \n       ```\n       log4j.appender.Application.layout=org.apache.log4j.PatternLayout\n       log4j.appender.Application.layout.ConversionPattern=%d %p [%c] - %m%n\n       ```\n       以自定义的格式输出日志信息。 \n\n[来源](http://blog.csdn.net/zdwzzu2006/article/details/6102145)\n ","slug":"Log4j使用总结","published":1,"updated":"2016-12-14T17:03:27.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb1300081ou7ok4v121n","content":"<p>Log4j是apache的一个开源项目，用来操作程序日志信息的框架。因便于管理，在工程中用来代替System.out打印语句。通过配置Log4j中的log4j.properties，可以指定日志信息的级别，输出地点，输出格式。</p>\n<h5 id=\"一、LOG4J组成\"><a href=\"#一、LOG4J组成\" class=\"headerlink\" title=\"一、LOG4J组成\"></a>一、LOG4J组成</h5><p> Log4j的有3大主要组件：<br>      1，Logger:记录器，决定什么日志信息应该被输出、什么日志信息应该被忽略。<br>      2，Appender:存放器，指定日志信息应该输出到什么地方，可以是控制台、文件、网络设备。<br>      3，Layout:布局格式，指定日志信息的输出格式。<br>   一个logger可以用多个appender，也就是说日志信息可以同时输出到多个设备上，每个appender对应一种layout。<br>   所以,记录器用来整合日志信息，一个日志信息调整好以后，交给记录器的所有存放器，每一个存放器根据自己的格式输出日志信息。</p>\n<h5 id=\"二、记录器组件Logger\"><a href=\"#二、记录器组件Logger\" class=\"headerlink\" title=\"二、记录器组件Logger\"></a>二、记录器组件Logger</h5><p>   1.根记录器 ： rootLogger<br>     配置语法 ：log4j.rootLogger = [日志级别],存放器名1,存放器名2, … ,存放器名N<br>     日志级别 ：级别由高到低依次是：fatal、error、warn、info、debug。<br>     项目中代码：<br>          <code>log4j.rootLogger=INFO, stdout, logfile</code><br>      跟记录器的日子级别是info,所以info，warn,error,fatal均会被执行。stdout,logfile是存放器。</p>\n<ol>\n<li><p>在配置文件中配置Logger组件<br>可在Log4J配置文件中配置自己的Logger组件<br>项目中代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">log4j.logger.Application=INFO,Application</div><div class=\"line\">log4j.logger.Service=DEBUG,Service</div><div class=\"line\">log4j.logger.jdbc=INFO,jdbc</div><div class=\"line\">log4j.logger.Action=INFO,Action</div></pre></td></tr></table></figure>\n<p>定义了application,service,jdbc,action四个自己的logger组件，并分别配置了级别和存放器。</p>\n<h5 id=\"三、存放器组件Appender\"><a href=\"#三、存放器组件Appender\" class=\"headerlink\" title=\"三、存放器组件Appender\"></a>三、存放器组件Appender</h5><p>配置语法 ：<br>   log4j.appender.存放器名 = 存放类<br>   log4j.appender.存放器名.option1 = value1<br>存放类：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">org.apache.log4j.ConsoleAppender         控制台输出</div><div class=\"line\">     org.apache.log4j.FileAppender          文件</div><div class=\"line\">     org.apache.log4j.DailyRollingFileAppender 每天产生一个日志文件</div><div class=\"line\">     org.apache.log4j.RollingFileAppender  文件大小到达指定尺寸的时候产生一个新的文件</div><div class=\"line\">     org.apache.log4j.WriterAppender   将日志信息以流格式发送到任意指定的地方</div></pre></td></tr></table></figure>\n<p>项目中代码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Application记录器：</div><div class=\"line\">   log4j.appender.Application=org.apache.log4j.RollingFileAppender</div><div class=\"line\">   log4j.appender.Application.encoding=UTF-8</div><div class=\"line\">   log4j.appender.Application.File=/imagesys/logs/ImageCreditServer/ApplicationLog.log</div><div class=\"line\">   log4j.appender.Service.MaxFileSize=10240KB      </div><div class=\"line\"> Service记录器：</div><div class=\"line\">    log4j.appender.Service=org.apache.log4j.RollingFileAppender</div><div class=\"line\">    log4j.appender.Service.encoding=UTF-8</div><div class=\"line\">    log4j.appender.Service.File=/imagesys/logs/ImageCreditServer/ServiceLog.log</div><div class=\"line\">    log4j.appender.Service.MaxFileSize=10240KB</div><div class=\"line\">  jdbc记录器：</div><div class=\"line\">    log4j.appender.jdbc=org.apache.log4j.RollingFileAppender</div><div class=\"line\">    log4j.appender.jdbc.encoding=UTF-8</div><div class=\"line\">    log4j.appender.jdbc.File=/imagesys/logs/ImageCreditServer/jdbcLog.log </div><div class=\"line\">    log4j.appender.jdbc.MaxFileSize=1024KB</div><div class=\"line\">  action记录器：</div><div class=\"line\">    log4j.appender.Action=org.apache.log4j.RollingFileAppender</div><div class=\"line\">    log4j.appender.Action.encoding=UTF-8</div><div class=\"line\">    log4j.appender.Action.File=/imagesys/logs/ImageCreditServer/ActionLog.log</div><div class=\"line\">    log4j.appender.Action.MaxFileSize=10240KB</div></pre></td></tr></table></figure>\n<p>分别制定了输出文件的存放类，编码方式，文件路径，文件大小。</p>\n<h5 id=\"四、格式化组件Layout\"><a href=\"#四、格式化组件Layout\" class=\"headerlink\" title=\"四、格式化组件Layout\"></a>四、格式化组件Layout</h5><p> 配置语法 ：<br> log4j.appender.存放器名.layout = 格式类<br> log4j.appender.存放器名.layout.option1 = value1<br>  … …<br> log4j.appender.存放器名.layout.optionN = valueN<br> 输出格式类型：<br> . org.apache.log4j.HTMLLayout(以HTML表格形式布局);<br> . org.apache.log4j.PatternLayout(可以灵活地指定布局模式);<br> . org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串);<br> . org.apache.log4j.TTCCLayout(包含日志产生的时间、线程和类别等信息);<br> 打印参数如下：<br>%m：输出代码中指定的消息。<br>%p：输出优先级。<br>%r：输入自应用启动到输出该log信息耗费的毫秒数。<br>%c：输出所属的类目，通常就是所在类的全名。<br>%t：输出产生该日志线程的线程名。<br>%n：输出一个回车换行符。Windows平台为“\\r\\n”，UNIX为“\\n”。<br>%d：输出日志时间点的日期或时间，默认格式为ISO8601，推荐使用“%d{ABSOLUTE}”，这个输出格式形如：“2007-05-07 18:23:23,500”，符合中国人习惯。<br>%l：输出日志事件发生的位置，包括类名、线程名，以及所在代码的行数。<br>  项目中代码： </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">log4j.appender.Application.layout=org.apache.log4j.PatternLayout</div><div class=\"line\">log4j.appender.Application.layout.ConversionPattern=%d %p [%c] - %m%n</div></pre></td></tr></table></figure>\n<p> 以自定义的格式输出日志信息。 </p>\n</li>\n</ol>\n<p><a href=\"http://blog.csdn.net/zdwzzu2006/article/details/6102145\" target=\"_blank\" rel=\"external\">来源</a></p>\n","excerpt":"","more":"<p>Log4j是apache的一个开源项目，用来操作程序日志信息的框架。因便于管理，在工程中用来代替System.out打印语句。通过配置Log4j中的log4j.properties，可以指定日志信息的级别，输出地点，输出格式。</p>\n<h5 id=\"一、LOG4J组成\"><a href=\"#一、LOG4J组成\" class=\"headerlink\" title=\"一、LOG4J组成\"></a>一、LOG4J组成</h5><p> Log4j的有3大主要组件：<br>      1，Logger:记录器，决定什么日志信息应该被输出、什么日志信息应该被忽略。<br>      2，Appender:存放器，指定日志信息应该输出到什么地方，可以是控制台、文件、网络设备。<br>      3，Layout:布局格式，指定日志信息的输出格式。<br>   一个logger可以用多个appender，也就是说日志信息可以同时输出到多个设备上，每个appender对应一种layout。<br>   所以,记录器用来整合日志信息，一个日志信息调整好以后，交给记录器的所有存放器，每一个存放器根据自己的格式输出日志信息。</p>\n<h5 id=\"二、记录器组件Logger\"><a href=\"#二、记录器组件Logger\" class=\"headerlink\" title=\"二、记录器组件Logger\"></a>二、记录器组件Logger</h5><p>   1.根记录器 ： rootLogger<br>     配置语法 ：log4j.rootLogger = [日志级别],存放器名1,存放器名2, … ,存放器名N<br>     日志级别 ：级别由高到低依次是：fatal、error、warn、info、debug。<br>     项目中代码：<br>          <code>log4j.rootLogger=INFO, stdout, logfile</code><br>      跟记录器的日子级别是info,所以info，warn,error,fatal均会被执行。stdout,logfile是存放器。</p>\n<ol>\n<li><p>在配置文件中配置Logger组件<br>可在Log4J配置文件中配置自己的Logger组件<br>项目中代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">log4j.logger.Application=INFO,Application</div><div class=\"line\">log4j.logger.Service=DEBUG,Service</div><div class=\"line\">log4j.logger.jdbc=INFO,jdbc</div><div class=\"line\">log4j.logger.Action=INFO,Action</div></pre></td></tr></table></figure>\n<p>定义了application,service,jdbc,action四个自己的logger组件，并分别配置了级别和存放器。</p>\n<h5 id=\"三、存放器组件Appender\"><a href=\"#三、存放器组件Appender\" class=\"headerlink\" title=\"三、存放器组件Appender\"></a>三、存放器组件Appender</h5><p>配置语法 ：<br>   log4j.appender.存放器名 = 存放类<br>   log4j.appender.存放器名.option1 = value1<br>存放类：</p>\n   <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">org.apache.log4j.ConsoleAppender         控制台输出</div><div class=\"line\">     org.apache.log4j.FileAppender          文件</div><div class=\"line\">     org.apache.log4j.DailyRollingFileAppender 每天产生一个日志文件</div><div class=\"line\">     org.apache.log4j.RollingFileAppender  文件大小到达指定尺寸的时候产生一个新的文件</div><div class=\"line\">     org.apache.log4j.WriterAppender   将日志信息以流格式发送到任意指定的地方</div></pre></td></tr></table></figure>\n<p>项目中代码：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">Application记录器：</div><div class=\"line\">   log4j.appender.Application=org.apache.log4j.RollingFileAppender</div><div class=\"line\">   log4j.appender.Application.encoding=UTF-8</div><div class=\"line\">   log4j.appender.Application.File=/imagesys/logs/ImageCreditServer/ApplicationLog.log</div><div class=\"line\">   log4j.appender.Service.MaxFileSize=10240KB      </div><div class=\"line\"> Service记录器：</div><div class=\"line\">    log4j.appender.Service=org.apache.log4j.RollingFileAppender</div><div class=\"line\">    log4j.appender.Service.encoding=UTF-8</div><div class=\"line\">    log4j.appender.Service.File=/imagesys/logs/ImageCreditServer/ServiceLog.log</div><div class=\"line\">    log4j.appender.Service.MaxFileSize=10240KB</div><div class=\"line\">  jdbc记录器：</div><div class=\"line\">    log4j.appender.jdbc=org.apache.log4j.RollingFileAppender</div><div class=\"line\">    log4j.appender.jdbc.encoding=UTF-8</div><div class=\"line\">    log4j.appender.jdbc.File=/imagesys/logs/ImageCreditServer/jdbcLog.log </div><div class=\"line\">    log4j.appender.jdbc.MaxFileSize=1024KB</div><div class=\"line\">  action记录器：</div><div class=\"line\">    log4j.appender.Action=org.apache.log4j.RollingFileAppender</div><div class=\"line\">    log4j.appender.Action.encoding=UTF-8</div><div class=\"line\">    log4j.appender.Action.File=/imagesys/logs/ImageCreditServer/ActionLog.log</div><div class=\"line\">    log4j.appender.Action.MaxFileSize=10240KB</div></pre></td></tr></table></figure>\n<p>分别制定了输出文件的存放类，编码方式，文件路径，文件大小。</p>\n<h5 id=\"四、格式化组件Layout\"><a href=\"#四、格式化组件Layout\" class=\"headerlink\" title=\"四、格式化组件Layout\"></a>四、格式化组件Layout</h5><p> 配置语法 ：<br> log4j.appender.存放器名.layout = 格式类<br> log4j.appender.存放器名.layout.option1 = value1<br>  … …<br> log4j.appender.存放器名.layout.optionN = valueN<br> 输出格式类型：<br> . org.apache.log4j.HTMLLayout(以HTML表格形式布局);<br> . org.apache.log4j.PatternLayout(可以灵活地指定布局模式);<br> . org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串);<br> . org.apache.log4j.TTCCLayout(包含日志产生的时间、线程和类别等信息);<br> 打印参数如下：<br>%m：输出代码中指定的消息。<br>%p：输出优先级。<br>%r：输入自应用启动到输出该log信息耗费的毫秒数。<br>%c：输出所属的类目，通常就是所在类的全名。<br>%t：输出产生该日志线程的线程名。<br>%n：输出一个回车换行符。Windows平台为“\\r\\n”，UNIX为“\\n”。<br>%d：输出日志时间点的日期或时间，默认格式为ISO8601，推荐使用“%d{ABSOLUTE}”，这个输出格式形如：“2007-05-07 18:23:23,500”，符合中国人习惯。<br>%l：输出日志事件发生的位置，包括类名、线程名，以及所在代码的行数。<br>  项目中代码： </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">log4j.appender.Application.layout=org.apache.log4j.PatternLayout</div><div class=\"line\">log4j.appender.Application.layout.ConversionPattern=%d %p [%c] - %m%n</div></pre></td></tr></table></figure>\n<p> 以自定义的格式输出日志信息。 </p>\n</li>\n</ol>\n<p><a href=\"http://blog.csdn.net/zdwzzu2006/article/details/6102145\">来源</a></p>\n"},{"title":"Linux下JVM线程CPU负载过高问题排查","date":"2016-12-08T15:44:05.000Z","_content":"##### 过程:\n1. top命令查看占用cpu过高进程，获取PID\n2. top -H  - p PID 获取PID进程中的线程信息 ，按照CPU使用率排序，找到线程号，把线程号转换为十六进制（printf %x  线程号），\n3. jstack 进程号 | grep 十六进制线程号 >jstack_out.txt ，查看线程信息\n4. 分析原因\n----\n##### 说明：\n> jstack是jdk的一个命令行工具，可以用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。\n线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合；生成线程快照的目的是定位线程出险长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等都是导致线程长时间停顿常见原因。\n线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后再做什么事情，或者等待着什么资源。\n\nLinux数的进制转换可以选用printf,例如\n\t十进制的10转换转换为十六进制\n    ```\n    printf %x 10\n    a\n    ```\n\t十六进制的f转换为十进制\n    ```\n    printf %d 0xf\n    15\n    ```","source":"_posts/Linux下JVM线程CPU负载过高问题排查.md","raw":"---\ntitle: Linux下JVM线程CPU负载过高问题排查\ndate: 2016-12-8 23:44:05\ntags: \n\t- JVM\ncategories: \n\t- Linux\n\t- JVM\t\n---\n##### 过程:\n1. top命令查看占用cpu过高进程，获取PID\n2. top -H  - p PID 获取PID进程中的线程信息 ，按照CPU使用率排序，找到线程号，把线程号转换为十六进制（printf %x  线程号），\n3. jstack 进程号 | grep 十六进制线程号 >jstack_out.txt ，查看线程信息\n4. 分析原因\n----\n##### 说明：\n> jstack是jdk的一个命令行工具，可以用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。\n线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合；生成线程快照的目的是定位线程出险长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等都是导致线程长时间停顿常见原因。\n线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后再做什么事情，或者等待着什么资源。\n\nLinux数的进制转换可以选用printf,例如\n\t十进制的10转换转换为十六进制\n    ```\n    printf %x 10\n    a\n    ```\n\t十六进制的f转换为十进制\n    ```\n    printf %d 0xf\n    15\n    ```","slug":"Linux下JVM线程CPU负载过高问题排查","published":1,"updated":"2016-12-14T17:04:58.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb1500091ou78hglg6as","content":"<h5 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程:\"></a>过程:</h5><ol>\n<li>top命令查看占用cpu过高进程，获取PID</li>\n<li>top -H  - p PID 获取PID进程中的线程信息 ，按照CPU使用率排序，找到线程号，把线程号转换为十六进制（printf %x  线程号），</li>\n<li>jstack 进程号 | grep 十六进制线程号 &gt;jstack_out.txt ，查看线程信息</li>\n<li>分析原因</li>\n</ol>\n<hr>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>jstack是jdk的一个命令行工具，可以用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。<br>线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合；生成线程快照的目的是定位线程出险长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等都是导致线程长时间停顿常见原因。<br>线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后再做什么事情，或者等待着什么资源。</p>\n</blockquote>\n<p>Linux数的进制转换可以选用printf,例如<br>    十进制的10转换转换为十六进制<br>    <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">printf %x 10</div><div class=\"line\">a</div></pre></td></tr></table></figure></p>\n<pre><code>十六进制的f转换为十进制\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">printf %d 0xf</div><div class=\"line\">15</div></pre></td></tr></table></figure>\n</code></pre>","excerpt":"","more":"<h5 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程:\"></a>过程:</h5><ol>\n<li>top命令查看占用cpu过高进程，获取PID</li>\n<li>top -H  - p PID 获取PID进程中的线程信息 ，按照CPU使用率排序，找到线程号，把线程号转换为十六进制（printf %x  线程号），</li>\n<li>jstack 进程号 | grep 十六进制线程号 &gt;jstack_out.txt ，查看线程信息</li>\n<li>分析原因</li>\n</ol>\n<hr>\n<h5 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h5><blockquote>\n<p>jstack是jdk的一个命令行工具，可以用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。<br>线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合；生成线程快照的目的是定位线程出险长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等都是导致线程长时间停顿常见原因。<br>线程出现停顿的时候通过jstack来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后再做什么事情，或者等待着什么资源。</p>\n</blockquote>\n<p>Linux数的进制转换可以选用printf,例如<br>    十进制的10转换转换为十六进制<br>    <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">printf %x 10</div><div class=\"line\">a</div></pre></td></tr></table></figure></p>\n<pre><code>十六进制的f转换为十进制\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">printf %d 0xf</div><div class=\"line\">15</div></pre></td></tr></table></figure>\n</code></pre>"},{"title":"My First Blog","date":"2016-08-20T15:44:05.000Z","type":"tags","_content":"### Welcome to my first blog!\nThis project builds on [Hexo](https://hexo.io) and [Github Pages](https://www.pages.github.com).\nIf you want source code , you can search it on  my [GitHub](https://www.github.com/CHasGao/ChasGao.github.io).\n\n### **Reference**\n[如何搭建一个独立博客——简明Github Pages与Hexo教程](http://www.jianshu.com/p/05289a4bc8b2)\n[使用Hexo搭建个人博客(基于hexo3.0)](http://opiece.me/2015/04/09/hexo-guide/)\n[NexT主题使用文档](http://theme-next.iissnan.com/)\n[Markdown在线编辑器**stackedit**](https://stackedit.io/editor#)\n[一分钟学会Markdown](http://lutaf.com/markdown-simple-usage.htm)\n[献给写作者的 Markdown 新手指南](http://www.jianshu.com/p/q81RER)","source":"_posts/My-First-Blog.md","raw":"---\ntitle: My First Blog\ndate: 2016-08-20 23:44:05\ntags: \n\t- Hexo教程\n\t- Markdown语法\ntype: \"tags\"\ncategories: \n\t- Hexo\n\t- Markdown\n---\n### Welcome to my first blog!\nThis project builds on [Hexo](https://hexo.io) and [Github Pages](https://www.pages.github.com).\nIf you want source code , you can search it on  my [GitHub](https://www.github.com/CHasGao/ChasGao.github.io).\n\n### **Reference**\n[如何搭建一个独立博客——简明Github Pages与Hexo教程](http://www.jianshu.com/p/05289a4bc8b2)\n[使用Hexo搭建个人博客(基于hexo3.0)](http://opiece.me/2015/04/09/hexo-guide/)\n[NexT主题使用文档](http://theme-next.iissnan.com/)\n[Markdown在线编辑器**stackedit**](https://stackedit.io/editor#)\n[一分钟学会Markdown](http://lutaf.com/markdown-simple-usage.htm)\n[献给写作者的 Markdown 新手指南](http://www.jianshu.com/p/q81RER)","slug":"My-First-Blog","published":1,"updated":"2016-12-14T16:14:59.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb18000a1ou7urelcc1d","content":"<h3 id=\"Welcome-to-my-first-blog\"><a href=\"#Welcome-to-my-first-blog\" class=\"headerlink\" title=\"Welcome to my first blog!\"></a>Welcome to my first blog!</h3><p>This project builds on <a href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a> and <a href=\"https://www.pages.github.com\" target=\"_blank\" rel=\"external\">Github Pages</a>.<br>If you want source code , you can search it on  my <a href=\"https://www.github.com/CHasGao/ChasGao.github.io\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><strong>Reference</strong></h3><p><a href=\"http://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"external\">如何搭建一个独立博客——简明Github Pages与Hexo教程</a><br><a href=\"http://opiece.me/2015/04/09/hexo-guide/\" target=\"_blank\" rel=\"external\">使用Hexo搭建个人博客(基于hexo3.0)</a><br><a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">NexT主题使用文档</a><br><a href=\"https://stackedit.io/editor#\" target=\"_blank\" rel=\"external\">Markdown在线编辑器<strong>stackedit</strong></a><br><a href=\"http://lutaf.com/markdown-simple-usage.htm\" target=\"_blank\" rel=\"external\">一分钟学会Markdown</a><br><a href=\"http://www.jianshu.com/p/q81RER\" target=\"_blank\" rel=\"external\">献给写作者的 Markdown 新手指南</a></p>\n","excerpt":"","more":"<h3 id=\"Welcome-to-my-first-blog\"><a href=\"#Welcome-to-my-first-blog\" class=\"headerlink\" title=\"Welcome to my first blog!\"></a>Welcome to my first blog!</h3><p>This project builds on <a href=\"https://hexo.io\">Hexo</a> and <a href=\"https://www.pages.github.com\">Github Pages</a>.<br>If you want source code , you can search it on  my <a href=\"https://www.github.com/CHasGao/ChasGao.github.io\">GitHub</a>.</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a><strong>Reference</strong></h3><p><a href=\"http://www.jianshu.com/p/05289a4bc8b2\">如何搭建一个独立博客——简明Github Pages与Hexo教程</a><br><a href=\"http://opiece.me/2015/04/09/hexo-guide/\">使用Hexo搭建个人博客(基于hexo3.0)</a><br><a href=\"http://theme-next.iissnan.com/\">NexT主题使用文档</a><br><a href=\"https://stackedit.io/editor#\">Markdown在线编辑器<strong>stackedit</strong></a><br><a href=\"http://lutaf.com/markdown-simple-usage.htm\">一分钟学会Markdown</a><br><a href=\"http://www.jianshu.com/p/q81RER\">献给写作者的 Markdown 新手指南</a></p>\n"},{"title":"MyEclipse安装Markdown插件","date":"2016-12-10T12:44:05.000Z","_content":"MyEclipse或者Eclipse中安装Markdown Text Editor这个插件,可以编辑、预览*.md*文件，效果还可以。\n特性描述: document outline, folded sections, preview, export-to-html, task tags, word-wrapping, paragraph formatting.\n插件下载地址：http://www.nodeclipse.org/updates/markdown/\n\nmarketplace地址：https://marketplace.eclipse.org/content/markdown-text-editor/metrics","source":"_posts/MyEclipse安装Markdown插件.md","raw":"---\ntitle: MyEclipse安装Markdown插件\ndate: 2016-12-10 20:44:05\ntags: \n\t- Markdown插件\n\t- Hexo教程\ncategories: \n\t-Markdown\t\n---\nMyEclipse或者Eclipse中安装Markdown Text Editor这个插件,可以编辑、预览*.md*文件，效果还可以。\n特性描述: document outline, folded sections, preview, export-to-html, task tags, word-wrapping, paragraph formatting.\n插件下载地址：http://www.nodeclipse.org/updates/markdown/\n\nmarketplace地址：https://marketplace.eclipse.org/content/markdown-text-editor/metrics","slug":"MyEclipse安装Markdown插件","published":1,"updated":"2016-12-14T15:52:13.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb1e000e1ou78f30gzs8","content":"<p>MyEclipse或者Eclipse中安装Markdown Text Editor这个插件,可以编辑、预览<em>.md</em>文件，效果还可以。<br>特性描述: document outline, folded sections, preview, export-to-html, task tags, word-wrapping, paragraph formatting.<br>插件下载地址：<a href=\"http://www.nodeclipse.org/updates/markdown/\" target=\"_blank\" rel=\"external\">http://www.nodeclipse.org/updates/markdown/</a></p>\n<p>marketplace地址：<a href=\"https://marketplace.eclipse.org/content/markdown-text-editor/metrics\" target=\"_blank\" rel=\"external\">https://marketplace.eclipse.org/content/markdown-text-editor/metrics</a></p>\n","excerpt":"","more":"<p>MyEclipse或者Eclipse中安装Markdown Text Editor这个插件,可以编辑、预览<em>.md</em>文件，效果还可以。<br>特性描述: document outline, folded sections, preview, export-to-html, task tags, word-wrapping, paragraph formatting.<br>插件下载地址：<a href=\"http://www.nodeclipse.org/updates/markdown/\">http://www.nodeclipse.org/updates/markdown/</a></p>\n<p>marketplace地址：<a href=\"https://marketplace.eclipse.org/content/markdown-text-editor/metrics\">https://marketplace.eclipse.org/content/markdown-text-editor/metrics</a></p>\n"},{"title":"PreparingInterview","date":"2016-12-15T04:44:05.000Z","type":"tags","_content":"#### 前期准备（需要拍个顺序）\n* 自我介绍\n* 面向对象三大特性\n\t> * 封装、继承和多态。\n\t> * 封装就是把描述一个对象的属性和行为的代码封装在一个类中，有些属性是不希望公开的，或者说被其他对象访问的，所以我们使用private修饰该属性，使其隐藏起来；类中提供了方法（用public修饰），常用的是get、set方法，可以操作这些被隐藏的属性，其他类可以通过调用这些方法，改变隐藏属性的值！封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。\n\t> * 继承：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，使用extends关键字实现继承；子类中可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。\n\t> * 多态：多态就是在声明时使用父类，在实现或调用时使用具体的子类；即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性，多态增强了软件的灵活性和扩展性。这里可以举个例子，比如声明时使用的是动物类，调用时传递的是一个猫类（动物类的子类）的对象，具体执行父类里动物——吃的方法时，实际执行的是猫——吃的方法。\n* 语言基础，String类可以被继承吗？为什么？\n* Final能修饰什么？（当时我说class、field、method，他说还有吗？然后又叫我不要在意，后来回想起，应该是问到我在参数里面要不要用final，接下来是因为匿名内部类）\n* 静态内部类、内部类、匿名内部类，为什么内部类会持有外部类的引用？持有的引用是this？还是其它？\n\t 静态内部类：使用static修饰的内部类\n\t匿名内部类：使用new生成的内部类\n\t因为内部类的产生依赖于外部类，持有的引用是类名.this。\n* 跨进程间通信\n* Java中try catch finally的执行顺序\n\t> 先执行try中代码发生异常执行catch中代码，最后一定会执行finally中代码\n* switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？\n\t> switch支持使用byte类型，不支持long类型，String支持在java1.7引入\n* 介绍一下你的项目\n* 项目中遇到哪些问题，如何解决的？\n* 熟不熟JVM，说一下JVM的自动内存管理\n* Java中有内存泄露吗？（先说本质，再结合handler+匿名内部类）当时如何分析的？\n* Java虚拟机，垃圾回收\n* Java的垃圾回收机制，引用计数法两个对象互相引用如何解决？\n* 用过什么开源，举一个例子\n* 用过的开源框架的源码分析\n\n- - - \n#### 实践类\n* 面试官给程序，看错误\n* Debug和Release状态的不同\n* 标号1-n的n个人首尾相接，1到3报数，报到3的退出，求最后一个人的标号\n* 给定一个字符串，求第一个不重复的字符 abbcad -> c\n* 写代码，反转字符串\n* 写代码，字符串中出现最多的字符\n* 快速排序\n* 有一个容器类 ArrayList，保存整数类型的元素，现在要求编写一个帮助类，类内提供一个帮助函数，帮助函数的功能是删除 容器中<10的元素。\n- - - \n#### HR面试\n* 以后想做什么方向？\n* 优缺点？兴趣？\n* 为什么想来HR的公司？公司最吸引你的是什么？\n* 评价一下我？\n\n\n","source":"_posts/PreparingInterview.md","raw":"---\ntitle: PreparingInterview\ndate: 2016-12-15 12:44:05\ntype: \"tags\"\ncategories: \n\t- 面试\n---\n#### 前期准备（需要拍个顺序）\n* 自我介绍\n* 面向对象三大特性\n\t> * 封装、继承和多态。\n\t> * 封装就是把描述一个对象的属性和行为的代码封装在一个类中，有些属性是不希望公开的，或者说被其他对象访问的，所以我们使用private修饰该属性，使其隐藏起来；类中提供了方法（用public修饰），常用的是get、set方法，可以操作这些被隐藏的属性，其他类可以通过调用这些方法，改变隐藏属性的值！封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。\n\t> * 继承：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，使用extends关键字实现继承；子类中可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。\n\t> * 多态：多态就是在声明时使用父类，在实现或调用时使用具体的子类；即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性，多态增强了软件的灵活性和扩展性。这里可以举个例子，比如声明时使用的是动物类，调用时传递的是一个猫类（动物类的子类）的对象，具体执行父类里动物——吃的方法时，实际执行的是猫——吃的方法。\n* 语言基础，String类可以被继承吗？为什么？\n* Final能修饰什么？（当时我说class、field、method，他说还有吗？然后又叫我不要在意，后来回想起，应该是问到我在参数里面要不要用final，接下来是因为匿名内部类）\n* 静态内部类、内部类、匿名内部类，为什么内部类会持有外部类的引用？持有的引用是this？还是其它？\n\t 静态内部类：使用static修饰的内部类\n\t匿名内部类：使用new生成的内部类\n\t因为内部类的产生依赖于外部类，持有的引用是类名.this。\n* 跨进程间通信\n* Java中try catch finally的执行顺序\n\t> 先执行try中代码发生异常执行catch中代码，最后一定会执行finally中代码\n* switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？\n\t> switch支持使用byte类型，不支持long类型，String支持在java1.7引入\n* 介绍一下你的项目\n* 项目中遇到哪些问题，如何解决的？\n* 熟不熟JVM，说一下JVM的自动内存管理\n* Java中有内存泄露吗？（先说本质，再结合handler+匿名内部类）当时如何分析的？\n* Java虚拟机，垃圾回收\n* Java的垃圾回收机制，引用计数法两个对象互相引用如何解决？\n* 用过什么开源，举一个例子\n* 用过的开源框架的源码分析\n\n- - - \n#### 实践类\n* 面试官给程序，看错误\n* Debug和Release状态的不同\n* 标号1-n的n个人首尾相接，1到3报数，报到3的退出，求最后一个人的标号\n* 给定一个字符串，求第一个不重复的字符 abbcad -> c\n* 写代码，反转字符串\n* 写代码，字符串中出现最多的字符\n* 快速排序\n* 有一个容器类 ArrayList，保存整数类型的元素，现在要求编写一个帮助类，类内提供一个帮助函数，帮助函数的功能是删除 容器中<10的元素。\n- - - \n#### HR面试\n* 以后想做什么方向？\n* 优缺点？兴趣？\n* 为什么想来HR的公司？公司最吸引你的是什么？\n* 评价一下我？\n\n\n","slug":"PreparingInterview","published":1,"updated":"2017-01-04T09:22:42.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb1m000g1ou7itmczqo2","content":"<h4 id=\"前期准备（需要拍个顺序）\"><a href=\"#前期准备（需要拍个顺序）\" class=\"headerlink\" title=\"前期准备（需要拍个顺序）\"></a>前期准备（需要拍个顺序）</h4><ul>\n<li>自我介绍</li>\n<li>面向对象三大特性<blockquote>\n<ul>\n<li>封装、继承和多态。</li>\n<li>封装就是把描述一个对象的属性和行为的代码封装在一个类中，有些属性是不希望公开的，或者说被其他对象访问的，所以我们使用private修饰该属性，使其隐藏起来；类中提供了方法（用public修饰），常用的是get、set方法，可以操作这些被隐藏的属性，其他类可以通过调用这些方法，改变隐藏属性的值！封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。</li>\n<li>继承：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，使用extends关键字实现继承；子类中可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。</li>\n<li>多态：多态就是在声明时使用父类，在实现或调用时使用具体的子类；即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性，多态增强了软件的灵活性和扩展性。这里可以举个例子，比如声明时使用的是动物类，调用时传递的是一个猫类（动物类的子类）的对象，具体执行父类里动物——吃的方法时，实际执行的是猫——吃的方法。</li>\n</ul>\n</blockquote>\n</li>\n<li>语言基础，String类可以被继承吗？为什么？</li>\n<li>Final能修饰什么？（当时我说class、field、method，他说还有吗？然后又叫我不要在意，后来回想起，应该是问到我在参数里面要不要用final，接下来是因为匿名内部类）</li>\n<li>静态内部类、内部类、匿名内部类，为什么内部类会持有外部类的引用？持有的引用是this？还是其它？<br>   静态内部类：使用static修饰的内部类<br>  匿名内部类：使用new生成的内部类<br>  因为内部类的产生依赖于外部类，持有的引用是类名.this。</li>\n<li>跨进程间通信</li>\n<li>Java中try catch finally的执行顺序<blockquote>\n<p>先执行try中代码发生异常执行catch中代码，最后一定会执行finally中代码</p>\n</blockquote>\n</li>\n<li>switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？<blockquote>\n<p>switch支持使用byte类型，不支持long类型，String支持在java1.7引入</p>\n</blockquote>\n</li>\n<li>介绍一下你的项目</li>\n<li>项目中遇到哪些问题，如何解决的？</li>\n<li>熟不熟JVM，说一下JVM的自动内存管理</li>\n<li>Java中有内存泄露吗？（先说本质，再结合handler+匿名内部类）当时如何分析的？</li>\n<li>Java虚拟机，垃圾回收</li>\n<li>Java的垃圾回收机制，引用计数法两个对象互相引用如何解决？</li>\n<li>用过什么开源，举一个例子</li>\n<li>用过的开源框架的源码分析</li>\n</ul>\n<hr>\n<h4 id=\"实践类\"><a href=\"#实践类\" class=\"headerlink\" title=\"实践类\"></a>实践类</h4><ul>\n<li>面试官给程序，看错误</li>\n<li>Debug和Release状态的不同</li>\n<li>标号1-n的n个人首尾相接，1到3报数，报到3的退出，求最后一个人的标号</li>\n<li>给定一个字符串，求第一个不重复的字符 abbcad -&gt; c</li>\n<li>写代码，反转字符串</li>\n<li>写代码，字符串中出现最多的字符</li>\n<li>快速排序</li>\n<li>有一个容器类 ArrayList，保存整数类型的元素，现在要求编写一个帮助类，类内提供一个帮助函数，帮助函数的功能是删除 容器中&lt;10的元素。</li>\n</ul>\n<hr>\n<h4 id=\"HR面试\"><a href=\"#HR面试\" class=\"headerlink\" title=\"HR面试\"></a>HR面试</h4><ul>\n<li>以后想做什么方向？</li>\n<li>优缺点？兴趣？</li>\n<li>为什么想来HR的公司？公司最吸引你的是什么？</li>\n<li>评价一下我？</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"前期准备（需要拍个顺序）\"><a href=\"#前期准备（需要拍个顺序）\" class=\"headerlink\" title=\"前期准备（需要拍个顺序）\"></a>前期准备（需要拍个顺序）</h4><ul>\n<li>自我介绍</li>\n<li>面向对象三大特性<blockquote>\n<ul>\n<li>封装、继承和多态。</li>\n<li>封装就是把描述一个对象的属性和行为的代码封装在一个类中，有些属性是不希望公开的，或者说被其他对象访问的，所以我们使用private修饰该属性，使其隐藏起来；类中提供了方法（用public修饰），常用的是get、set方法，可以操作这些被隐藏的属性，其他类可以通过调用这些方法，改变隐藏属性的值！封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。</li>\n<li>继承：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，使用extends关键字实现继承；子类中可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。</li>\n<li>多态：多态就是在声明时使用父类，在实现或调用时使用具体的子类；即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性，多态增强了软件的灵活性和扩展性。这里可以举个例子，比如声明时使用的是动物类，调用时传递的是一个猫类（动物类的子类）的对象，具体执行父类里动物——吃的方法时，实际执行的是猫——吃的方法。</li>\n</ul>\n</blockquote>\n</li>\n<li>语言基础，String类可以被继承吗？为什么？</li>\n<li>Final能修饰什么？（当时我说class、field、method，他说还有吗？然后又叫我不要在意，后来回想起，应该是问到我在参数里面要不要用final，接下来是因为匿名内部类）</li>\n<li>静态内部类、内部类、匿名内部类，为什么内部类会持有外部类的引用？持有的引用是this？还是其它？<br>   静态内部类：使用static修饰的内部类<br>  匿名内部类：使用new生成的内部类<br>  因为内部类的产生依赖于外部类，持有的引用是类名.this。</li>\n<li>跨进程间通信</li>\n<li>Java中try catch finally的执行顺序<blockquote>\n<p>先执行try中代码发生异常执行catch中代码，最后一定会执行finally中代码</p>\n</blockquote>\n</li>\n<li>switch是否能作用在byte上，是否能作用在long上，是否能作用在String上？<blockquote>\n<p>switch支持使用byte类型，不支持long类型，String支持在java1.7引入</p>\n</blockquote>\n</li>\n<li>介绍一下你的项目</li>\n<li>项目中遇到哪些问题，如何解决的？</li>\n<li>熟不熟JVM，说一下JVM的自动内存管理</li>\n<li>Java中有内存泄露吗？（先说本质，再结合handler+匿名内部类）当时如何分析的？</li>\n<li>Java虚拟机，垃圾回收</li>\n<li>Java的垃圾回收机制，引用计数法两个对象互相引用如何解决？</li>\n<li>用过什么开源，举一个例子</li>\n<li>用过的开源框架的源码分析</li>\n</ul>\n<hr>\n<h4 id=\"实践类\"><a href=\"#实践类\" class=\"headerlink\" title=\"实践类\"></a>实践类</h4><ul>\n<li>面试官给程序，看错误</li>\n<li>Debug和Release状态的不同</li>\n<li>标号1-n的n个人首尾相接，1到3报数，报到3的退出，求最后一个人的标号</li>\n<li>给定一个字符串，求第一个不重复的字符 abbcad -&gt; c</li>\n<li>写代码，反转字符串</li>\n<li>写代码，字符串中出现最多的字符</li>\n<li>快速排序</li>\n<li>有一个容器类 ArrayList，保存整数类型的元素，现在要求编写一个帮助类，类内提供一个帮助函数，帮助函数的功能是删除 容器中&lt;10的元素。</li>\n</ul>\n<hr>\n<h4 id=\"HR面试\"><a href=\"#HR面试\" class=\"headerlink\" title=\"HR面试\"></a>HR面试</h4><ul>\n<li>以后想做什么方向？</li>\n<li>优缺点？兴趣？</li>\n<li>为什么想来HR的公司？公司最吸引你的是什么？</li>\n<li>评价一下我？</li>\n</ul>\n"},{"title":"Vim安装、配置和操作","date":"2016-12-14T16:33:24.000Z","type":"tags","_content":"### Vim 介绍\n---\n* Vim 官网：[http://www.vim.org](http://www.vim.org)\n### Vim 安装\n---\n* CentOS：sudo yum install -y vim\n* Ubuntu：sudo apt-get install -y vim\n* Windows GVim 下载：[http://www.xiazaiba.com/html/3347.html](http://www.xiazaiba.com/html/3347.html)\n### Vim 配置（CentOS 环境）\n---\n* 编辑配置文件是：sudo vim /etc/vimrc\n### Vim 基础快捷键\n---\n* 注意  \n\t* 严格区分字母大小写\n\t* 含有 Ctrl 字眼都表示 Ctrl 键盘按钮\n\t* 特定符号需要配合 Shift 键，比如字母键盘区上面的数字区：!@#%%^&*()\n\t* 要按出冒号键 : 也是需要 Shift 的\n* 移动\n\t* j，下\n\t* k，上\n\t* h，左\n\t* l，右\n\t* v，按 v 之后按方向键可以选中你要选中的文字\n\t* gg，跳到第 1 行\n\t* G，跳到第最后行\n\t* 16G 或 :16，跳到第 16 行\n\t* $，到本行 行尾\n\t* 0，到本行 行头\n\t* w，到下一个单词的 开头\n\t* e，到下一个单词的 结尾\n\t* Ctrl + u，向文件 首翻 半屏\n\t* Ctrl + d，向文件 尾翻 半屏\n\t* Ctrl + f，向文件 尾翻 一屏\n\t* Ctrl + b，向文件 首翻 一屏\n\t* \\*，匹配光标当前所在的单词，移动光标到 下一个 匹配单词\n\t* \\#，匹配光标当前所在的单词，移动光标到 上一个 匹配单词\n\t* ^，到本行第一个单词头\n\t* g_，到本行最后一个单词尾巴\n\t* %，匹配括号移动，包括 (、{、[\n* 插入\n\t* I，在当前 行首 插入\n\t* A，在当前 行尾 插入\n\t* i，在当前字符的 左边 插入\n\t* a，在当前字符的 右边 插入\n\t* o，在当前行 下面 插入一个新行\n\t* O，在当前行 上面 插入一个新行\n* 编辑\n\t* 删除\n\t\t* x，删除 光标后 的 1 个字符\n\t\t* 2x，删除 光标后 的 2 个字符\n\t\t* X，删除 光标前 的 1 个字符\n\t\t* 2X，删除 光标前 的 2 个字符\n\t\t* dd，删除当前行\n\t\t* cc，删除当前行后进入 insert 模式\n\t\t* dw，删除当前光标下的单词/空格\n\t\t* d$，删除光标至 行尾 所有字符\n\t\t* dG，删除光标至 文件尾 所有字符\n\t\t* 3dd，从当前光标开始，删掉 3 行\n\t* 复制\n\t\t* y，复制光标所选字符\n\t\t* yw，复制光标后单词\n\t\t* yy，复制当前行\n\t\t* 4yy，复制当前行及下面 4 行\n\t\t* y$，复制光标位置至 行尾 的内容\n\t\t* y^，复制光标位置至 行首 的内容\n\t* 粘贴\n\t\t* p，将粘贴板中内容复制到 光标之后\n\t\t* P，将粘贴板中内容复制到 光标之前\n\t* 其他\n\t\t* ddp，交换当前光标所在行和下一行的位置\n\t\t* u，撤销\n\t\t* :wq，退出并 保存\n\t\t* :q!，退出并 不保存\n\t\t* Ctrl + v，进入 Vim 列编辑\n\t\t* guu，把当前行的字母全部转换成 小写\n\t\t* gUU，把当前行的字母全部转换成 大写\n\t\t* g~~，把当前行的字母是大写的转换成小写，是小写的转换成大写\n\t\t* :saveas /opt/setups/text.txt，另存到 /opt/setups/text.txt\n\t* 搜索\n\t\t* /YouMeek，从光标开始处向文件尾搜索 YouMeek 字符，按 n 继续向下找，按 N 继续向上找\n\t\t* ?YouMeek，从光标开始处向文件首搜索 YouMeek 字符，按 n 继续向下找，按 N 继续向上找\n\t* 替换\n\t\t* :%s/YouMeek/Judasn/g，把文件中所有 YouMeek 替换为：Judasn\n\t\t* :%s/YouMeek/Judasn/，把文件中所有行中第一个 YouMeek 替换为：Judasn\n\t\t* :s/YouMeek/Judasn/，把光标当前行第一个 YouMeek 替换为 Judasn\n\t\t* :s/YouMeek/Judasn/g，把光标当前行所有 YouMeek 替换为 Judasn\n\t\t* :s#YouMeek/#Judasn/#，除了使用斜杠作为分隔符之外，还可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符，该命令表示：把光标当前行第一个 YouMeek/ 替换为 Judasn/\n\t\t* :10,31s/YouMeek/Judasng，把第 10 行到 31 行之间所有 YouMeek 替换为 Judasn\n### Vim 的特殊复制、黏贴\n---\n* Vim 提供了 12 个剪贴板，分别是：0,1,2,3,4,5,6,7,8,9,a,\"，默认采用的是 \"，也就是双引号，可能你初读感觉很奇怪。你可以用 Vim 编辑某个文件，然后输入：:reg。你可以看到如下内容：\n\n\n* vim复制到某个剪切板的命令：\"7y，表示使用 7 号剪切板。\n* 黏贴某个剪切板内容：\"7p，表示使用 7 号剪切板内容进行黏贴\n\n### 资料\n---\n* [vim几个小技巧（批量替换，列编辑）](http://blogread.cn/it/article/1010?f=sa)\n* [最佳vim技巧](http://www.2maomao.com/blog/wp-content/uploads/vim_tips.txt)\n* [简明 Vim 练级攻略](http://coolshell.cn/articles/5426.html)\n* [vim 批量查找替换](http://blog.csdn.net/wangchong0/article/details/6801956)","source":"_posts/Vim安装、配置和操作.md","raw":"---\ntitle: Vim安装、配置和操作\ndate: 2016-12-15 00:33:24\ntags: \n\t- Vim\ntype: \"tags\"\ncategories: \n\t- Linux\n---\n### Vim 介绍\n---\n* Vim 官网：[http://www.vim.org](http://www.vim.org)\n### Vim 安装\n---\n* CentOS：sudo yum install -y vim\n* Ubuntu：sudo apt-get install -y vim\n* Windows GVim 下载：[http://www.xiazaiba.com/html/3347.html](http://www.xiazaiba.com/html/3347.html)\n### Vim 配置（CentOS 环境）\n---\n* 编辑配置文件是：sudo vim /etc/vimrc\n### Vim 基础快捷键\n---\n* 注意  \n\t* 严格区分字母大小写\n\t* 含有 Ctrl 字眼都表示 Ctrl 键盘按钮\n\t* 特定符号需要配合 Shift 键，比如字母键盘区上面的数字区：!@#%%^&*()\n\t* 要按出冒号键 : 也是需要 Shift 的\n* 移动\n\t* j，下\n\t* k，上\n\t* h，左\n\t* l，右\n\t* v，按 v 之后按方向键可以选中你要选中的文字\n\t* gg，跳到第 1 行\n\t* G，跳到第最后行\n\t* 16G 或 :16，跳到第 16 行\n\t* $，到本行 行尾\n\t* 0，到本行 行头\n\t* w，到下一个单词的 开头\n\t* e，到下一个单词的 结尾\n\t* Ctrl + u，向文件 首翻 半屏\n\t* Ctrl + d，向文件 尾翻 半屏\n\t* Ctrl + f，向文件 尾翻 一屏\n\t* Ctrl + b，向文件 首翻 一屏\n\t* \\*，匹配光标当前所在的单词，移动光标到 下一个 匹配单词\n\t* \\#，匹配光标当前所在的单词，移动光标到 上一个 匹配单词\n\t* ^，到本行第一个单词头\n\t* g_，到本行最后一个单词尾巴\n\t* %，匹配括号移动，包括 (、{、[\n* 插入\n\t* I，在当前 行首 插入\n\t* A，在当前 行尾 插入\n\t* i，在当前字符的 左边 插入\n\t* a，在当前字符的 右边 插入\n\t* o，在当前行 下面 插入一个新行\n\t* O，在当前行 上面 插入一个新行\n* 编辑\n\t* 删除\n\t\t* x，删除 光标后 的 1 个字符\n\t\t* 2x，删除 光标后 的 2 个字符\n\t\t* X，删除 光标前 的 1 个字符\n\t\t* 2X，删除 光标前 的 2 个字符\n\t\t* dd，删除当前行\n\t\t* cc，删除当前行后进入 insert 模式\n\t\t* dw，删除当前光标下的单词/空格\n\t\t* d$，删除光标至 行尾 所有字符\n\t\t* dG，删除光标至 文件尾 所有字符\n\t\t* 3dd，从当前光标开始，删掉 3 行\n\t* 复制\n\t\t* y，复制光标所选字符\n\t\t* yw，复制光标后单词\n\t\t* yy，复制当前行\n\t\t* 4yy，复制当前行及下面 4 行\n\t\t* y$，复制光标位置至 行尾 的内容\n\t\t* y^，复制光标位置至 行首 的内容\n\t* 粘贴\n\t\t* p，将粘贴板中内容复制到 光标之后\n\t\t* P，将粘贴板中内容复制到 光标之前\n\t* 其他\n\t\t* ddp，交换当前光标所在行和下一行的位置\n\t\t* u，撤销\n\t\t* :wq，退出并 保存\n\t\t* :q!，退出并 不保存\n\t\t* Ctrl + v，进入 Vim 列编辑\n\t\t* guu，把当前行的字母全部转换成 小写\n\t\t* gUU，把当前行的字母全部转换成 大写\n\t\t* g~~，把当前行的字母是大写的转换成小写，是小写的转换成大写\n\t\t* :saveas /opt/setups/text.txt，另存到 /opt/setups/text.txt\n\t* 搜索\n\t\t* /YouMeek，从光标开始处向文件尾搜索 YouMeek 字符，按 n 继续向下找，按 N 继续向上找\n\t\t* ?YouMeek，从光标开始处向文件首搜索 YouMeek 字符，按 n 继续向下找，按 N 继续向上找\n\t* 替换\n\t\t* :%s/YouMeek/Judasn/g，把文件中所有 YouMeek 替换为：Judasn\n\t\t* :%s/YouMeek/Judasn/，把文件中所有行中第一个 YouMeek 替换为：Judasn\n\t\t* :s/YouMeek/Judasn/，把光标当前行第一个 YouMeek 替换为 Judasn\n\t\t* :s/YouMeek/Judasn/g，把光标当前行所有 YouMeek 替换为 Judasn\n\t\t* :s#YouMeek/#Judasn/#，除了使用斜杠作为分隔符之外，还可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符，该命令表示：把光标当前行第一个 YouMeek/ 替换为 Judasn/\n\t\t* :10,31s/YouMeek/Judasng，把第 10 行到 31 行之间所有 YouMeek 替换为 Judasn\n### Vim 的特殊复制、黏贴\n---\n* Vim 提供了 12 个剪贴板，分别是：0,1,2,3,4,5,6,7,8,9,a,\"，默认采用的是 \"，也就是双引号，可能你初读感觉很奇怪。你可以用 Vim 编辑某个文件，然后输入：:reg。你可以看到如下内容：\n\n\n* vim复制到某个剪切板的命令：\"7y，表示使用 7 号剪切板。\n* 黏贴某个剪切板内容：\"7p，表示使用 7 号剪切板内容进行黏贴\n\n### 资料\n---\n* [vim几个小技巧（批量替换，列编辑）](http://blogread.cn/it/article/1010?f=sa)\n* [最佳vim技巧](http://www.2maomao.com/blog/wp-content/uploads/vim_tips.txt)\n* [简明 Vim 练级攻略](http://coolshell.cn/articles/5426.html)\n* [vim 批量查找替换](http://blog.csdn.net/wangchong0/article/details/6801956)","slug":"Vim安装、配置和操作","published":1,"updated":"2016-12-14T16:51:29.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb1s000j1ou7zuiektgz","content":"<h3 id=\"Vim-介绍\"><a href=\"#Vim-介绍\" class=\"headerlink\" title=\"Vim 介绍\"></a>Vim 介绍</h3><hr>\n<ul>\n<li>Vim 官网：<a href=\"http://www.vim.org\" target=\"_blank\" rel=\"external\">http://www.vim.org</a><h3 id=\"Vim-安装\"><a href=\"#Vim-安装\" class=\"headerlink\" title=\"Vim 安装\"></a>Vim 安装</h3></li>\n</ul>\n<hr>\n<ul>\n<li>CentOS：sudo yum install -y vim</li>\n<li>Ubuntu：sudo apt-get install -y vim</li>\n<li>Windows GVim 下载：<a href=\"http://www.xiazaiba.com/html/3347.html\" target=\"_blank\" rel=\"external\">http://www.xiazaiba.com/html/3347.html</a><h3 id=\"Vim-配置（CentOS-环境）\"><a href=\"#Vim-配置（CentOS-环境）\" class=\"headerlink\" title=\"Vim 配置（CentOS 环境）\"></a>Vim 配置（CentOS 环境）</h3></li>\n</ul>\n<hr>\n<ul>\n<li>编辑配置文件是：sudo vim /etc/vimrc<h3 id=\"Vim-基础快捷键\"><a href=\"#Vim-基础快捷键\" class=\"headerlink\" title=\"Vim 基础快捷键\"></a>Vim 基础快捷键</h3></li>\n</ul>\n<hr>\n<ul>\n<li>注意  <ul>\n<li>严格区分字母大小写</li>\n<li>含有 Ctrl 字眼都表示 Ctrl 键盘按钮</li>\n<li>特定符号需要配合 Shift 键，比如字母键盘区上面的数字区：!@#%%^&amp;*()</li>\n<li>要按出冒号键 : 也是需要 Shift 的</li>\n</ul>\n</li>\n<li>移动<ul>\n<li>j，下</li>\n<li>k，上</li>\n<li>h，左</li>\n<li>l，右</li>\n<li>v，按 v 之后按方向键可以选中你要选中的文字</li>\n<li>gg，跳到第 1 行</li>\n<li>G，跳到第最后行</li>\n<li>16G 或 :16，跳到第 16 行</li>\n<li>$，到本行 行尾</li>\n<li>0，到本行 行头</li>\n<li>w，到下一个单词的 开头</li>\n<li>e，到下一个单词的 结尾</li>\n<li>Ctrl + u，向文件 首翻 半屏</li>\n<li>Ctrl + d，向文件 尾翻 半屏</li>\n<li>Ctrl + f，向文件 尾翻 一屏</li>\n<li>Ctrl + b，向文件 首翻 一屏</li>\n<li>*，匹配光标当前所在的单词，移动光标到 下一个 匹配单词</li>\n<li>#，匹配光标当前所在的单词，移动光标到 上一个 匹配单词</li>\n<li>^，到本行第一个单词头</li>\n<li>g_，到本行最后一个单词尾巴</li>\n<li>%，匹配括号移动，包括 (、{、[</li>\n</ul>\n</li>\n<li>插入<ul>\n<li>I，在当前 行首 插入</li>\n<li>A，在当前 行尾 插入</li>\n<li>i，在当前字符的 左边 插入</li>\n<li>a，在当前字符的 右边 插入</li>\n<li>o，在当前行 下面 插入一个新行</li>\n<li>O，在当前行 上面 插入一个新行</li>\n</ul>\n</li>\n<li>编辑<ul>\n<li>删除<ul>\n<li>x，删除 光标后 的 1 个字符</li>\n<li>2x，删除 光标后 的 2 个字符</li>\n<li>X，删除 光标前 的 1 个字符</li>\n<li>2X，删除 光标前 的 2 个字符</li>\n<li>dd，删除当前行</li>\n<li>cc，删除当前行后进入 insert 模式</li>\n<li>dw，删除当前光标下的单词/空格</li>\n<li>d$，删除光标至 行尾 所有字符</li>\n<li>dG，删除光标至 文件尾 所有字符</li>\n<li>3dd，从当前光标开始，删掉 3 行</li>\n</ul>\n</li>\n<li>复制<ul>\n<li>y，复制光标所选字符</li>\n<li>yw，复制光标后单词</li>\n<li>yy，复制当前行</li>\n<li>4yy，复制当前行及下面 4 行</li>\n<li>y$，复制光标位置至 行尾 的内容</li>\n<li>y^，复制光标位置至 行首 的内容</li>\n</ul>\n</li>\n<li>粘贴<ul>\n<li>p，将粘贴板中内容复制到 光标之后</li>\n<li>P，将粘贴板中内容复制到 光标之前</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>ddp，交换当前光标所在行和下一行的位置</li>\n<li>u，撤销</li>\n<li>:wq，退出并 保存</li>\n<li>:q!，退出并 不保存</li>\n<li>Ctrl + v，进入 Vim 列编辑</li>\n<li>guu，把当前行的字母全部转换成 小写</li>\n<li>gUU，把当前行的字母全部转换成 大写</li>\n<li>g~~，把当前行的字母是大写的转换成小写，是小写的转换成大写</li>\n<li>:saveas /opt/setups/text.txt，另存到 /opt/setups/text.txt</li>\n</ul>\n</li>\n<li>搜索<ul>\n<li>/YouMeek，从光标开始处向文件尾搜索 YouMeek 字符，按 n 继续向下找，按 N 继续向上找</li>\n<li>?YouMeek，从光标开始处向文件首搜索 YouMeek 字符，按 n 继续向下找，按 N 继续向上找</li>\n</ul>\n</li>\n<li>替换<ul>\n<li>:%s/YouMeek/Judasn/g，把文件中所有 YouMeek 替换为：Judasn</li>\n<li>:%s/YouMeek/Judasn/，把文件中所有行中第一个 YouMeek 替换为：Judasn</li>\n<li>:s/YouMeek/Judasn/，把光标当前行第一个 YouMeek 替换为 Judasn</li>\n<li>:s/YouMeek/Judasn/g，把光标当前行所有 YouMeek 替换为 Judasn</li>\n<li>:s#YouMeek/#Judasn/#，除了使用斜杠作为分隔符之外，还可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符，该命令表示：把光标当前行第一个 YouMeek/ 替换为 Judasn/</li>\n<li>:10,31s/YouMeek/Judasng，把第 10 行到 31 行之间所有 YouMeek 替换为 Judasn<h3 id=\"Vim-的特殊复制、黏贴\"><a href=\"#Vim-的特殊复制、黏贴\" class=\"headerlink\" title=\"Vim 的特殊复制、黏贴\"></a>Vim 的特殊复制、黏贴</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>Vim 提供了 12 个剪贴板，分别是：0,1,2,3,4,5,6,7,8,9,a,”，默认采用的是 “，也就是双引号，可能你初读感觉很奇怪。你可以用 Vim 编辑某个文件，然后输入：:reg。你可以看到如下内容：</li>\n</ul>\n<ul>\n<li>vim复制到某个剪切板的命令：”7y，表示使用 7 号剪切板。</li>\n<li>黏贴某个剪切板内容：”7p，表示使用 7 号剪切板内容进行黏贴</li>\n</ul>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><hr>\n<ul>\n<li><a href=\"http://blogread.cn/it/article/1010?f=sa\" target=\"_blank\" rel=\"external\">vim几个小技巧（批量替换，列编辑）</a></li>\n<li><a href=\"http://www.2maomao.com/blog/wp-content/uploads/vim_tips.txt\" target=\"_blank\" rel=\"external\">最佳vim技巧</a></li>\n<li><a href=\"http://coolshell.cn/articles/5426.html\" target=\"_blank\" rel=\"external\">简明 Vim 练级攻略</a></li>\n<li><a href=\"http://blog.csdn.net/wangchong0/article/details/6801956\" target=\"_blank\" rel=\"external\">vim 批量查找替换</a></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"Vim-介绍\"><a href=\"#Vim-介绍\" class=\"headerlink\" title=\"Vim 介绍\"></a>Vim 介绍</h3><hr>\n<ul>\n<li>Vim 官网：<a href=\"http://www.vim.org\">http://www.vim.org</a><h3 id=\"Vim-安装\"><a href=\"#Vim-安装\" class=\"headerlink\" title=\"Vim 安装\"></a>Vim 安装</h3></li>\n</ul>\n<hr>\n<ul>\n<li>CentOS：sudo yum install -y vim</li>\n<li>Ubuntu：sudo apt-get install -y vim</li>\n<li>Windows GVim 下载：<a href=\"http://www.xiazaiba.com/html/3347.html\">http://www.xiazaiba.com/html/3347.html</a><h3 id=\"Vim-配置（CentOS-环境）\"><a href=\"#Vim-配置（CentOS-环境）\" class=\"headerlink\" title=\"Vim 配置（CentOS 环境）\"></a>Vim 配置（CentOS 环境）</h3></li>\n</ul>\n<hr>\n<ul>\n<li>编辑配置文件是：sudo vim /etc/vimrc<h3 id=\"Vim-基础快捷键\"><a href=\"#Vim-基础快捷键\" class=\"headerlink\" title=\"Vim 基础快捷键\"></a>Vim 基础快捷键</h3></li>\n</ul>\n<hr>\n<ul>\n<li>注意  <ul>\n<li>严格区分字母大小写</li>\n<li>含有 Ctrl 字眼都表示 Ctrl 键盘按钮</li>\n<li>特定符号需要配合 Shift 键，比如字母键盘区上面的数字区：!@#%%^&amp;*()</li>\n<li>要按出冒号键 : 也是需要 Shift 的</li>\n</ul>\n</li>\n<li>移动<ul>\n<li>j，下</li>\n<li>k，上</li>\n<li>h，左</li>\n<li>l，右</li>\n<li>v，按 v 之后按方向键可以选中你要选中的文字</li>\n<li>gg，跳到第 1 行</li>\n<li>G，跳到第最后行</li>\n<li>16G 或 :16，跳到第 16 行</li>\n<li>$，到本行 行尾</li>\n<li>0，到本行 行头</li>\n<li>w，到下一个单词的 开头</li>\n<li>e，到下一个单词的 结尾</li>\n<li>Ctrl + u，向文件 首翻 半屏</li>\n<li>Ctrl + d，向文件 尾翻 半屏</li>\n<li>Ctrl + f，向文件 尾翻 一屏</li>\n<li>Ctrl + b，向文件 首翻 一屏</li>\n<li>*，匹配光标当前所在的单词，移动光标到 下一个 匹配单词</li>\n<li>#，匹配光标当前所在的单词，移动光标到 上一个 匹配单词</li>\n<li>^，到本行第一个单词头</li>\n<li>g_，到本行最后一个单词尾巴</li>\n<li>%，匹配括号移动，包括 (、{、[</li>\n</ul>\n</li>\n<li>插入<ul>\n<li>I，在当前 行首 插入</li>\n<li>A，在当前 行尾 插入</li>\n<li>i，在当前字符的 左边 插入</li>\n<li>a，在当前字符的 右边 插入</li>\n<li>o，在当前行 下面 插入一个新行</li>\n<li>O，在当前行 上面 插入一个新行</li>\n</ul>\n</li>\n<li>编辑<ul>\n<li>删除<ul>\n<li>x，删除 光标后 的 1 个字符</li>\n<li>2x，删除 光标后 的 2 个字符</li>\n<li>X，删除 光标前 的 1 个字符</li>\n<li>2X，删除 光标前 的 2 个字符</li>\n<li>dd，删除当前行</li>\n<li>cc，删除当前行后进入 insert 模式</li>\n<li>dw，删除当前光标下的单词/空格</li>\n<li>d$，删除光标至 行尾 所有字符</li>\n<li>dG，删除光标至 文件尾 所有字符</li>\n<li>3dd，从当前光标开始，删掉 3 行</li>\n</ul>\n</li>\n<li>复制<ul>\n<li>y，复制光标所选字符</li>\n<li>yw，复制光标后单词</li>\n<li>yy，复制当前行</li>\n<li>4yy，复制当前行及下面 4 行</li>\n<li>y$，复制光标位置至 行尾 的内容</li>\n<li>y^，复制光标位置至 行首 的内容</li>\n</ul>\n</li>\n<li>粘贴<ul>\n<li>p，将粘贴板中内容复制到 光标之后</li>\n<li>P，将粘贴板中内容复制到 光标之前</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>ddp，交换当前光标所在行和下一行的位置</li>\n<li>u，撤销</li>\n<li>:wq，退出并 保存</li>\n<li>:q!，退出并 不保存</li>\n<li>Ctrl + v，进入 Vim 列编辑</li>\n<li>guu，把当前行的字母全部转换成 小写</li>\n<li>gUU，把当前行的字母全部转换成 大写</li>\n<li>g~~，把当前行的字母是大写的转换成小写，是小写的转换成大写</li>\n<li>:saveas /opt/setups/text.txt，另存到 /opt/setups/text.txt</li>\n</ul>\n</li>\n<li>搜索<ul>\n<li>/YouMeek，从光标开始处向文件尾搜索 YouMeek 字符，按 n 继续向下找，按 N 继续向上找</li>\n<li>?YouMeek，从光标开始处向文件首搜索 YouMeek 字符，按 n 继续向下找，按 N 继续向上找</li>\n</ul>\n</li>\n<li>替换<ul>\n<li>:%s/YouMeek/Judasn/g，把文件中所有 YouMeek 替换为：Judasn</li>\n<li>:%s/YouMeek/Judasn/，把文件中所有行中第一个 YouMeek 替换为：Judasn</li>\n<li>:s/YouMeek/Judasn/，把光标当前行第一个 YouMeek 替换为 Judasn</li>\n<li>:s/YouMeek/Judasn/g，把光标当前行所有 YouMeek 替换为 Judasn</li>\n<li>:s#YouMeek/#Judasn/#，除了使用斜杠作为分隔符之外，还可以使用 # 作为分隔符，此时中间出现的 / 不会作为分隔符，该命令表示：把光标当前行第一个 YouMeek/ 替换为 Judasn/</li>\n<li>:10,31s/YouMeek/Judasng，把第 10 行到 31 行之间所有 YouMeek 替换为 Judasn<h3 id=\"Vim-的特殊复制、黏贴\"><a href=\"#Vim-的特殊复制、黏贴\" class=\"headerlink\" title=\"Vim 的特殊复制、黏贴\"></a>Vim 的特殊复制、黏贴</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>Vim 提供了 12 个剪贴板，分别是：0,1,2,3,4,5,6,7,8,9,a,”，默认采用的是 “，也就是双引号，可能你初读感觉很奇怪。你可以用 Vim 编辑某个文件，然后输入：:reg。你可以看到如下内容：</li>\n</ul>\n<ul>\n<li>vim复制到某个剪切板的命令：”7y，表示使用 7 号剪切板。</li>\n<li>黏贴某个剪切板内容：”7p，表示使用 7 号剪切板内容进行黏贴</li>\n</ul>\n<h3 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h3><hr>\n<ul>\n<li><a href=\"http://blogread.cn/it/article/1010?f=sa\">vim几个小技巧（批量替换，列编辑）</a></li>\n<li><a href=\"http://www.2maomao.com/blog/wp-content/uploads/vim_tips.txt\">最佳vim技巧</a></li>\n<li><a href=\"http://coolshell.cn/articles/5426.html\">简明 Vim 练级攻略</a></li>\n<li><a href=\"http://blog.csdn.net/wangchong0/article/details/6801956\">vim 批量查找替换</a></li>\n</ul>\n"},{"title":"java读写文件大全","date":"2016-12-13T16:17:00.000Z","_content":"### java中多种方式读文件\n\n##### 一、多种方式读文件内容。\n\n1. 按字节读取文件内容\n2. 按字符读取文件内容\n3. 按行读取文件内容\n4. 随机读取文件内容\n```\nimport java.io.BufferedReader;  \nimport java.io.File;  \nimport java.io.FileInputStream;  \nimport java.io.FileReader;  \nimport java.io.IOException;  \nimport java.io.InputStream;  \nimport java.io.InputStreamReader;  \nimport java.io.RandomAccessFile;  \nimport java.io.Reader;  \npublic class ReadFromFile {  \n/** \n* 以字节为单位读取文件，常用于读二进制文件，如图片、声音、影像等文件。 \n* @param fileName 文件的名 \n*/  \npublic static void readFileByBytes(String fileName){  \nFile file = new File(fileName);  \nInputStream in = null;  \ntry {  \nSystem.out.println(\"以字节为单位读取文件内容，一次读一个字节：\");  \n// 一次读一个字节  \nin = new FileInputStream(file);  \nint tempbyte;  \nwhile((tempbyte=in.read()) != -1){  \nSystem.out.write(tempbyte);  \n}  \nin.close();  \n} catch (IOException e) {  \ne.printStackTrace();  \nreturn;  \n}  \ntry {  \nSystem.out.println(\"以字节为单位读取文件内容，一次读多个字节：\");  \n//一次读多个字节  \nbyte[] tempbytes = new byte[100];  \nint byteread = 0;  \nin = new FileInputStream(fileName);  \nReadFromFile.showAvailableBytes(in);  \n//读入多个字节到字节数组中，byteread为一次读入的字节数  \nwhile ((byteread = in.read(tempbytes)) != -1){  \nSystem.out.write(tempbytes, 0, byteread);  \n}  \n} catch (Exception e1) {  \ne1.printStackTrace();  \n} finally {  \nif (in != null){  \ntry {  \nin.close();  \n} catch (IOException e1) {  \n}  \n}  \n}  \n}  \n/** \n* 以字符为单位读取文件，常用于读文本，数字等类型的文件 \n* @param fileName 文件名 \n*/  \npublic static void readFileByChars(String fileName){  \nFile file = new File(fileName);  \nReader reader = null;  \ntry {  \nSystem.out.println(\"以字符为单位读取文件内容，一次读一个字节：\");  \n// 一次读一个字符  \nreader = new InputStreamReader(new FileInputStream(file));  \nint tempchar;  \nwhile ((tempchar = reader.read()) != -1){  \n//对于windows下，rn这两个字符在一起时，表示一个换行。  \n//但如果这两个字符分开显示时，会换两次行。  \n//因此，屏蔽掉r，或者屏蔽n。否则，将会多出很多空行。  \nif (((char)tempchar) != 'r'){  \nSystem.out.print((char)tempchar);  \n}  \n}  \nreader.close();  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \ntry {  \nSystem.out.println(\"以字符为单位读取文件内容，一次读多个字节：\");  \n//一次读多个字符  \nchar[] tempchars = new char[30];  \nint charread = 0;  \nreader = new InputStreamReader(new FileInputStream(fileName));  \n//读入多个字符到字符数组中，charread为一次读取字符数  \nwhile ((charread = reader.read(tempchars))!=-1){  \n//同样屏蔽掉r不显示  \nif ((charread == tempchars.length)&&(tempchars[tempchars.length-1] != 'r')){  \nSystem.out.print(tempchars);  \n}else{  \nfor (int i=0; i<charread; i++){  \nif(tempchars[i] == 'r'){  \ncontinue;  \n}else{  \nSystem.out.print(tempchars[i]);  \n}  \n}  \n}  \n}  \n} catch (Exception e1) {  \ne1.printStackTrace();  \n}finally {  \nif (reader != null){  \ntry {  \nreader.close();  \n} catch (IOException e1) {  \n}  \n}  \n}  \n}  \n/** \n* 以行为单位读取文件，常用于读面向行的格式化文件 \n* @param fileName 文件名 \n*/  \npublic static void readFileByLines(String fileName){  \nFile file = new File(fileName);  \nBufferedReader reader = null;  \ntry {  \nSystem.out.println(\"以行为单位读取文件内容，一次读一整行：\");  \nreader = new BufferedReader(new FileReader(file));  \nString tempString = null;  \nint line = 1;  \n//一次读入一行，直到读入null为文件结束  \nwhile ((tempString = reader.readLine()) != null){  \n//显示行号  \nSystem.out.println(\"line \" + line + \": \" + tempString);  \nline++;  \n}  \nreader.close();  \n} catch (IOException e) {  \ne.printStackTrace();  \n} finally {  \nif (reader != null){  \ntry {  \nreader.close();  \n} catch (IOException e1) {  \n}  \n}  \n}  \n}  \n/** \n* 随机读取文件内容 \n* @param fileName 文件名 \n*/  \npublic static void readFileByRandomAccess(String fileName){  \nRandomAccessFile randomFile = null;  \ntry {  \nSystem.out.println(\"随机读取一段文件内容：\");  \n// 打开一个随机访问文件流，按只读方式  \nrandomFile = new RandomAccessFile(fileName, \"r\");  \n// 文件长度，字节数  \nlong fileLength = randomFile.length();  \n// 读文件的起始位置  \nint beginIndex = (fileLength > 4) ? 4 : 0;  \n//将读文件的开始位置移到beginIndex位置。  \nrandomFile.seek(beginIndex);  \nbyte[] bytes = new byte[10];  \nint byteread = 0;  \n//一次读10个字节，如果文件内容不足10个字节，则读剩下的字节。  \n//将一次读取的字节数赋给byteread  \nwhile ((byteread = randomFile.read(bytes)) != -1){  \nSystem.out.write(bytes, 0, byteread);  \n}  \n} catch (IOException e){  \ne.printStackTrace();  \n} finally {  \nif (randomFile != null){  \ntry {  \nrandomFile.close();  \n} catch (IOException e1) {  \n}  \n}  \n}  \n}  \n/** \n* 显示输入流中还剩的字节数 \n* @param in \n*/  \nprivate static void showAvailableBytes(InputStream in){  \ntry {  \nSystem.out.println(\"当前字节输入流中的字节数为:\" + in.available());  \n} catch (IOException e) {  \ne.printStackTrace();  \n}  \n}  \npublic static void main(String[] args) {  \nString fileName = \"C:/temp/newTemp.txt\";  \nReadFromFile.readFileByBytes(fileName);  \nReadFromFile.readFileByChars(fileName);  \nReadFromFile.readFileByLines(fileName);  \nReadFromFile.readFileByRandomAccess(fileName);  \n}  \n}  \n```\n\n##### 二、将内容追加到文件尾部\n```\nimport java.io.FileWriter;  \nimport java.io.IOException;  \nimport java.io.RandomAccessFile;  \n/** \n* 将内容追加到文件尾部 \n*/  \npublic class AppendToFile {  \n/** \n* A方法追加文件：使用RandomAccessFile \n* @param fileName 文件名 \n* @param content 追加的内容 \n*/  \npublic static void appendMethodA(String fileName,  \n  \nString content){  \ntry {  \n// 打开一个随机访问文件流，按读写方式  \nRandomAccessFile randomFile = new RandomAccessFile(fileName, \"rw\");  \n// 文件长度，字节数  \nlong fileLength = randomFile.length();  \n//将写文件指针移到文件尾。  \nrandomFile.seek(fileLength);  \nrandomFile.writeBytes(content);  \nrandomFile.close();  \n} catch (IOException e){  \ne.printStackTrace();  \n}  \n}  \n/** \n* B方法追加文件：使用FileWriter \n* @param fileName \n* @param content \n*/  \npublic static void appendMethodB(String fileName, String content){  \ntry {  \n//打开一个写文件器，构造函数中的第二个参数true表示以追加形式写文件  \nFileWriter writer = new FileWriter(fileName, true);  \nwriter.write(content);  \nwriter.close();  \n} catch (IOException e) {  \ne.printStackTrace();  \n}  \n}  \npublic static void main(String[] args) {  \nString fileName = \"C:/temp/newTemp.txt\";  \nString content = \"new append!\";  \n//按方法A追加文件  \nAppendToFile.appendMethodA(fileName, content);  \nAppendToFile.appendMethodA(fileName, \"append end. n\");  \n//显示文件内容  \nReadFromFile.readFileByLines(fileName);  \n//按方法B追加文件  \nAppendToFile.appendMethodB(fileName, content);  \nAppendToFile.appendMethodB(fileName, \"append end. n\");  \n//显示文件内容  \nReadFromFile.readFileByLines(fileName);  \n}  \n}\n```\n[来源](http://blog.csdn.net/smartcat86/article/details/4085739)\n ","source":"_posts/java读写文件大全.md","raw":"---\ntitle: java读写文件大全\ndate: 2016-12-14 00:17:00\ntags:\n\t- java文件读写\ncategories: \n\t- Java\t\n---\n### java中多种方式读文件\n\n##### 一、多种方式读文件内容。\n\n1. 按字节读取文件内容\n2. 按字符读取文件内容\n3. 按行读取文件内容\n4. 随机读取文件内容\n```\nimport java.io.BufferedReader;  \nimport java.io.File;  \nimport java.io.FileInputStream;  \nimport java.io.FileReader;  \nimport java.io.IOException;  \nimport java.io.InputStream;  \nimport java.io.InputStreamReader;  \nimport java.io.RandomAccessFile;  \nimport java.io.Reader;  \npublic class ReadFromFile {  \n/** \n* 以字节为单位读取文件，常用于读二进制文件，如图片、声音、影像等文件。 \n* @param fileName 文件的名 \n*/  \npublic static void readFileByBytes(String fileName){  \nFile file = new File(fileName);  \nInputStream in = null;  \ntry {  \nSystem.out.println(\"以字节为单位读取文件内容，一次读一个字节：\");  \n// 一次读一个字节  \nin = new FileInputStream(file);  \nint tempbyte;  \nwhile((tempbyte=in.read()) != -1){  \nSystem.out.write(tempbyte);  \n}  \nin.close();  \n} catch (IOException e) {  \ne.printStackTrace();  \nreturn;  \n}  \ntry {  \nSystem.out.println(\"以字节为单位读取文件内容，一次读多个字节：\");  \n//一次读多个字节  \nbyte[] tempbytes = new byte[100];  \nint byteread = 0;  \nin = new FileInputStream(fileName);  \nReadFromFile.showAvailableBytes(in);  \n//读入多个字节到字节数组中，byteread为一次读入的字节数  \nwhile ((byteread = in.read(tempbytes)) != -1){  \nSystem.out.write(tempbytes, 0, byteread);  \n}  \n} catch (Exception e1) {  \ne1.printStackTrace();  \n} finally {  \nif (in != null){  \ntry {  \nin.close();  \n} catch (IOException e1) {  \n}  \n}  \n}  \n}  \n/** \n* 以字符为单位读取文件，常用于读文本，数字等类型的文件 \n* @param fileName 文件名 \n*/  \npublic static void readFileByChars(String fileName){  \nFile file = new File(fileName);  \nReader reader = null;  \ntry {  \nSystem.out.println(\"以字符为单位读取文件内容，一次读一个字节：\");  \n// 一次读一个字符  \nreader = new InputStreamReader(new FileInputStream(file));  \nint tempchar;  \nwhile ((tempchar = reader.read()) != -1){  \n//对于windows下，rn这两个字符在一起时，表示一个换行。  \n//但如果这两个字符分开显示时，会换两次行。  \n//因此，屏蔽掉r，或者屏蔽n。否则，将会多出很多空行。  \nif (((char)tempchar) != 'r'){  \nSystem.out.print((char)tempchar);  \n}  \n}  \nreader.close();  \n} catch (Exception e) {  \ne.printStackTrace();  \n}  \ntry {  \nSystem.out.println(\"以字符为单位读取文件内容，一次读多个字节：\");  \n//一次读多个字符  \nchar[] tempchars = new char[30];  \nint charread = 0;  \nreader = new InputStreamReader(new FileInputStream(fileName));  \n//读入多个字符到字符数组中，charread为一次读取字符数  \nwhile ((charread = reader.read(tempchars))!=-1){  \n//同样屏蔽掉r不显示  \nif ((charread == tempchars.length)&&(tempchars[tempchars.length-1] != 'r')){  \nSystem.out.print(tempchars);  \n}else{  \nfor (int i=0; i<charread; i++){  \nif(tempchars[i] == 'r'){  \ncontinue;  \n}else{  \nSystem.out.print(tempchars[i]);  \n}  \n}  \n}  \n}  \n} catch (Exception e1) {  \ne1.printStackTrace();  \n}finally {  \nif (reader != null){  \ntry {  \nreader.close();  \n} catch (IOException e1) {  \n}  \n}  \n}  \n}  \n/** \n* 以行为单位读取文件，常用于读面向行的格式化文件 \n* @param fileName 文件名 \n*/  \npublic static void readFileByLines(String fileName){  \nFile file = new File(fileName);  \nBufferedReader reader = null;  \ntry {  \nSystem.out.println(\"以行为单位读取文件内容，一次读一整行：\");  \nreader = new BufferedReader(new FileReader(file));  \nString tempString = null;  \nint line = 1;  \n//一次读入一行，直到读入null为文件结束  \nwhile ((tempString = reader.readLine()) != null){  \n//显示行号  \nSystem.out.println(\"line \" + line + \": \" + tempString);  \nline++;  \n}  \nreader.close();  \n} catch (IOException e) {  \ne.printStackTrace();  \n} finally {  \nif (reader != null){  \ntry {  \nreader.close();  \n} catch (IOException e1) {  \n}  \n}  \n}  \n}  \n/** \n* 随机读取文件内容 \n* @param fileName 文件名 \n*/  \npublic static void readFileByRandomAccess(String fileName){  \nRandomAccessFile randomFile = null;  \ntry {  \nSystem.out.println(\"随机读取一段文件内容：\");  \n// 打开一个随机访问文件流，按只读方式  \nrandomFile = new RandomAccessFile(fileName, \"r\");  \n// 文件长度，字节数  \nlong fileLength = randomFile.length();  \n// 读文件的起始位置  \nint beginIndex = (fileLength > 4) ? 4 : 0;  \n//将读文件的开始位置移到beginIndex位置。  \nrandomFile.seek(beginIndex);  \nbyte[] bytes = new byte[10];  \nint byteread = 0;  \n//一次读10个字节，如果文件内容不足10个字节，则读剩下的字节。  \n//将一次读取的字节数赋给byteread  \nwhile ((byteread = randomFile.read(bytes)) != -1){  \nSystem.out.write(bytes, 0, byteread);  \n}  \n} catch (IOException e){  \ne.printStackTrace();  \n} finally {  \nif (randomFile != null){  \ntry {  \nrandomFile.close();  \n} catch (IOException e1) {  \n}  \n}  \n}  \n}  \n/** \n* 显示输入流中还剩的字节数 \n* @param in \n*/  \nprivate static void showAvailableBytes(InputStream in){  \ntry {  \nSystem.out.println(\"当前字节输入流中的字节数为:\" + in.available());  \n} catch (IOException e) {  \ne.printStackTrace();  \n}  \n}  \npublic static void main(String[] args) {  \nString fileName = \"C:/temp/newTemp.txt\";  \nReadFromFile.readFileByBytes(fileName);  \nReadFromFile.readFileByChars(fileName);  \nReadFromFile.readFileByLines(fileName);  \nReadFromFile.readFileByRandomAccess(fileName);  \n}  \n}  \n```\n\n##### 二、将内容追加到文件尾部\n```\nimport java.io.FileWriter;  \nimport java.io.IOException;  \nimport java.io.RandomAccessFile;  \n/** \n* 将内容追加到文件尾部 \n*/  \npublic class AppendToFile {  \n/** \n* A方法追加文件：使用RandomAccessFile \n* @param fileName 文件名 \n* @param content 追加的内容 \n*/  \npublic static void appendMethodA(String fileName,  \n  \nString content){  \ntry {  \n// 打开一个随机访问文件流，按读写方式  \nRandomAccessFile randomFile = new RandomAccessFile(fileName, \"rw\");  \n// 文件长度，字节数  \nlong fileLength = randomFile.length();  \n//将写文件指针移到文件尾。  \nrandomFile.seek(fileLength);  \nrandomFile.writeBytes(content);  \nrandomFile.close();  \n} catch (IOException e){  \ne.printStackTrace();  \n}  \n}  \n/** \n* B方法追加文件：使用FileWriter \n* @param fileName \n* @param content \n*/  \npublic static void appendMethodB(String fileName, String content){  \ntry {  \n//打开一个写文件器，构造函数中的第二个参数true表示以追加形式写文件  \nFileWriter writer = new FileWriter(fileName, true);  \nwriter.write(content);  \nwriter.close();  \n} catch (IOException e) {  \ne.printStackTrace();  \n}  \n}  \npublic static void main(String[] args) {  \nString fileName = \"C:/temp/newTemp.txt\";  \nString content = \"new append!\";  \n//按方法A追加文件  \nAppendToFile.appendMethodA(fileName, content);  \nAppendToFile.appendMethodA(fileName, \"append end. n\");  \n//显示文件内容  \nReadFromFile.readFileByLines(fileName);  \n//按方法B追加文件  \nAppendToFile.appendMethodB(fileName, content);  \nAppendToFile.appendMethodB(fileName, \"append end. n\");  \n//显示文件内容  \nReadFromFile.readFileByLines(fileName);  \n}  \n}\n```\n[来源](http://blog.csdn.net/smartcat86/article/details/4085739)\n ","slug":"java读写文件大全","published":1,"updated":"2016-12-14T17:02:01.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixiqkb1x000m1ou7smgrsmfl","content":"<h3 id=\"java中多种方式读文件\"><a href=\"#java中多种方式读文件\" class=\"headerlink\" title=\"java中多种方式读文件\"></a>java中多种方式读文件</h3><h5 id=\"一、多种方式读文件内容。\"><a href=\"#一、多种方式读文件内容。\" class=\"headerlink\" title=\"一、多种方式读文件内容。\"></a>一、多种方式读文件内容。</h5><ol>\n<li>按字节读取文件内容</li>\n<li>按字符读取文件内容</li>\n<li>按行读取文件内容</li>\n<li>随机读取文件内容<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">import java.io.BufferedReader;  </div><div class=\"line\">import java.io.File;  </div><div class=\"line\">import java.io.FileInputStream;  </div><div class=\"line\">import java.io.FileReader;  </div><div class=\"line\">import java.io.IOException;  </div><div class=\"line\">import java.io.InputStream;  </div><div class=\"line\">import java.io.InputStreamReader;  </div><div class=\"line\">import java.io.RandomAccessFile;  </div><div class=\"line\">import java.io.Reader;  </div><div class=\"line\">public class ReadFromFile &#123;  </div><div class=\"line\">/** </div><div class=\"line\">* 以字节为单位读取文件，常用于读二进制文件，如图片、声音、影像等文件。 </div><div class=\"line\">* @param fileName 文件的名 </div><div class=\"line\">*/  </div><div class=\"line\">public static void readFileByBytes(String fileName)&#123;  </div><div class=\"line\">File file = new File(fileName);  </div><div class=\"line\">InputStream in = null;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以字节为单位读取文件内容，一次读一个字节：&quot;);  </div><div class=\"line\">// 一次读一个字节  </div><div class=\"line\">in = new FileInputStream(file);  </div><div class=\"line\">int tempbyte;  </div><div class=\"line\">while((tempbyte=in.read()) != -1)&#123;  </div><div class=\"line\">System.out.write(tempbyte);  </div><div class=\"line\">&#125;  </div><div class=\"line\">in.close();  </div><div class=\"line\">&#125; catch (IOException e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">return;  </div><div class=\"line\">&#125;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以字节为单位读取文件内容，一次读多个字节：&quot;);  </div><div class=\"line\">//一次读多个字节  </div><div class=\"line\">byte[] tempbytes = new byte[100];  </div><div class=\"line\">int byteread = 0;  </div><div class=\"line\">in = new FileInputStream(fileName);  </div><div class=\"line\">ReadFromFile.showAvailableBytes(in);  </div><div class=\"line\">//读入多个字节到字节数组中，byteread为一次读入的字节数  </div><div class=\"line\">while ((byteread = in.read(tempbytes)) != -1)&#123;  </div><div class=\"line\">System.out.write(tempbytes, 0, byteread);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125; catch (Exception e1) &#123;  </div><div class=\"line\">e1.printStackTrace();  </div><div class=\"line\">&#125; finally &#123;  </div><div class=\"line\">if (in != null)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">in.close();  </div><div class=\"line\">&#125; catch (IOException e1) &#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* 以字符为单位读取文件，常用于读文本，数字等类型的文件 </div><div class=\"line\">* @param fileName 文件名 </div><div class=\"line\">*/  </div><div class=\"line\">public static void readFileByChars(String fileName)&#123;  </div><div class=\"line\">File file = new File(fileName);  </div><div class=\"line\">Reader reader = null;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以字符为单位读取文件内容，一次读一个字节：&quot;);  </div><div class=\"line\">// 一次读一个字符  </div><div class=\"line\">reader = new InputStreamReader(new FileInputStream(file));  </div><div class=\"line\">int tempchar;  </div><div class=\"line\">while ((tempchar = reader.read()) != -1)&#123;  </div><div class=\"line\">//对于windows下，rn这两个字符在一起时，表示一个换行。  </div><div class=\"line\">//但如果这两个字符分开显示时，会换两次行。  </div><div class=\"line\">//因此，屏蔽掉r，或者屏蔽n。否则，将会多出很多空行。  </div><div class=\"line\">if (((char)tempchar) != &apos;r&apos;)&#123;  </div><div class=\"line\">System.out.print((char)tempchar);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">reader.close();  </div><div class=\"line\">&#125; catch (Exception e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以字符为单位读取文件内容，一次读多个字节：&quot;);  </div><div class=\"line\">//一次读多个字符  </div><div class=\"line\">char[] tempchars = new char[30];  </div><div class=\"line\">int charread = 0;  </div><div class=\"line\">reader = new InputStreamReader(new FileInputStream(fileName));  </div><div class=\"line\">//读入多个字符到字符数组中，charread为一次读取字符数  </div><div class=\"line\">while ((charread = reader.read(tempchars))!=-1)&#123;  </div><div class=\"line\">//同样屏蔽掉r不显示  </div><div class=\"line\">if ((charread == tempchars.length)&amp;&amp;(tempchars[tempchars.length-1] != &apos;r&apos;))&#123;  </div><div class=\"line\">System.out.print(tempchars);  </div><div class=\"line\">&#125;else&#123;  </div><div class=\"line\">for (int i=0; i&lt;charread; i++)&#123;  </div><div class=\"line\">if(tempchars[i] == &apos;r&apos;)&#123;  </div><div class=\"line\">continue;  </div><div class=\"line\">&#125;else&#123;  </div><div class=\"line\">System.out.print(tempchars[i]);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125; catch (Exception e1) &#123;  </div><div class=\"line\">e1.printStackTrace();  </div><div class=\"line\">&#125;finally &#123;  </div><div class=\"line\">if (reader != null)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">reader.close();  </div><div class=\"line\">&#125; catch (IOException e1) &#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* 以行为单位读取文件，常用于读面向行的格式化文件 </div><div class=\"line\">* @param fileName 文件名 </div><div class=\"line\">*/  </div><div class=\"line\">public static void readFileByLines(String fileName)&#123;  </div><div class=\"line\">File file = new File(fileName);  </div><div class=\"line\">BufferedReader reader = null;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以行为单位读取文件内容，一次读一整行：&quot;);  </div><div class=\"line\">reader = new BufferedReader(new FileReader(file));  </div><div class=\"line\">String tempString = null;  </div><div class=\"line\">int line = 1;  </div><div class=\"line\">//一次读入一行，直到读入null为文件结束  </div><div class=\"line\">while ((tempString = reader.readLine()) != null)&#123;  </div><div class=\"line\">//显示行号  </div><div class=\"line\">System.out.println(&quot;line &quot; + line + &quot;: &quot; + tempString);  </div><div class=\"line\">line++;  </div><div class=\"line\">&#125;  </div><div class=\"line\">reader.close();  </div><div class=\"line\">&#125; catch (IOException e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125; finally &#123;  </div><div class=\"line\">if (reader != null)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">reader.close();  </div><div class=\"line\">&#125; catch (IOException e1) &#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* 随机读取文件内容 </div><div class=\"line\">* @param fileName 文件名 </div><div class=\"line\">*/  </div><div class=\"line\">public static void readFileByRandomAccess(String fileName)&#123;  </div><div class=\"line\">RandomAccessFile randomFile = null;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;随机读取一段文件内容：&quot;);  </div><div class=\"line\">// 打开一个随机访问文件流，按只读方式  </div><div class=\"line\">randomFile = new RandomAccessFile(fileName, &quot;r&quot;);  </div><div class=\"line\">// 文件长度，字节数  </div><div class=\"line\">long fileLength = randomFile.length();  </div><div class=\"line\">// 读文件的起始位置  </div><div class=\"line\">int beginIndex = (fileLength &gt; 4) ? 4 : 0;  </div><div class=\"line\">//将读文件的开始位置移到beginIndex位置。  </div><div class=\"line\">randomFile.seek(beginIndex);  </div><div class=\"line\">byte[] bytes = new byte[10];  </div><div class=\"line\">int byteread = 0;  </div><div class=\"line\">//一次读10个字节，如果文件内容不足10个字节，则读剩下的字节。  </div><div class=\"line\">//将一次读取的字节数赋给byteread  </div><div class=\"line\">while ((byteread = randomFile.read(bytes)) != -1)&#123;  </div><div class=\"line\">System.out.write(bytes, 0, byteread);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125; catch (IOException e)&#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125; finally &#123;  </div><div class=\"line\">if (randomFile != null)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">randomFile.close();  </div><div class=\"line\">&#125; catch (IOException e1) &#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* 显示输入流中还剩的字节数 </div><div class=\"line\">* @param in </div><div class=\"line\">*/  </div><div class=\"line\">private static void showAvailableBytes(InputStream in)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;当前字节输入流中的字节数为:&quot; + in.available());  </div><div class=\"line\">&#125; catch (IOException e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">public static void main(String[] args) &#123;  </div><div class=\"line\">String fileName = &quot;C:/temp/newTemp.txt&quot;;  </div><div class=\"line\">ReadFromFile.readFileByBytes(fileName);  </div><div class=\"line\">ReadFromFile.readFileByChars(fileName);  </div><div class=\"line\">ReadFromFile.readFileByLines(fileName);  </div><div class=\"line\">ReadFromFile.readFileByRandomAccess(fileName);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"二、将内容追加到文件尾部\"><a href=\"#二、将内容追加到文件尾部\" class=\"headerlink\" title=\"二、将内容追加到文件尾部\"></a>二、将内容追加到文件尾部</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">import java.io.FileWriter;  </div><div class=\"line\">import java.io.IOException;  </div><div class=\"line\">import java.io.RandomAccessFile;  </div><div class=\"line\">/** </div><div class=\"line\">* 将内容追加到文件尾部 </div><div class=\"line\">*/  </div><div class=\"line\">public class AppendToFile &#123;  </div><div class=\"line\">/** </div><div class=\"line\">* A方法追加文件：使用RandomAccessFile </div><div class=\"line\">* @param fileName 文件名 </div><div class=\"line\">* @param content 追加的内容 </div><div class=\"line\">*/  </div><div class=\"line\">public static void appendMethodA(String fileName,  </div><div class=\"line\">  </div><div class=\"line\">String content)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">// 打开一个随机访问文件流，按读写方式  </div><div class=\"line\">RandomAccessFile randomFile = new RandomAccessFile(fileName, &quot;rw&quot;);  </div><div class=\"line\">// 文件长度，字节数  </div><div class=\"line\">long fileLength = randomFile.length();  </div><div class=\"line\">//将写文件指针移到文件尾。  </div><div class=\"line\">randomFile.seek(fileLength);  </div><div class=\"line\">randomFile.writeBytes(content);  </div><div class=\"line\">randomFile.close();  </div><div class=\"line\">&#125; catch (IOException e)&#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* B方法追加文件：使用FileWriter </div><div class=\"line\">* @param fileName </div><div class=\"line\">* @param content </div><div class=\"line\">*/  </div><div class=\"line\">public static void appendMethodB(String fileName, String content)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">//打开一个写文件器，构造函数中的第二个参数true表示以追加形式写文件  </div><div class=\"line\">FileWriter writer = new FileWriter(fileName, true);  </div><div class=\"line\">writer.write(content);  </div><div class=\"line\">writer.close();  </div><div class=\"line\">&#125; catch (IOException e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">public static void main(String[] args) &#123;  </div><div class=\"line\">String fileName = &quot;C:/temp/newTemp.txt&quot;;  </div><div class=\"line\">String content = &quot;new append!&quot;;  </div><div class=\"line\">//按方法A追加文件  </div><div class=\"line\">AppendToFile.appendMethodA(fileName, content);  </div><div class=\"line\">AppendToFile.appendMethodA(fileName, &quot;append end. n&quot;);  </div><div class=\"line\">//显示文件内容  </div><div class=\"line\">ReadFromFile.readFileByLines(fileName);  </div><div class=\"line\">//按方法B追加文件  </div><div class=\"line\">AppendToFile.appendMethodB(fileName, content);  </div><div class=\"line\">AppendToFile.appendMethodB(fileName, &quot;append end. n&quot;);  </div><div class=\"line\">//显示文件内容  </div><div class=\"line\">ReadFromFile.readFileByLines(fileName);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://blog.csdn.net/smartcat86/article/details/4085739\" target=\"_blank\" rel=\"external\">来源</a></p>\n","excerpt":"","more":"<h3 id=\"java中多种方式读文件\"><a href=\"#java中多种方式读文件\" class=\"headerlink\" title=\"java中多种方式读文件\"></a>java中多种方式读文件</h3><h5 id=\"一、多种方式读文件内容。\"><a href=\"#一、多种方式读文件内容。\" class=\"headerlink\" title=\"一、多种方式读文件内容。\"></a>一、多种方式读文件内容。</h5><ol>\n<li>按字节读取文件内容</li>\n<li>按字符读取文件内容</li>\n<li>按行读取文件内容</li>\n<li>随机读取文件内容<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">import java.io.BufferedReader;  </div><div class=\"line\">import java.io.File;  </div><div class=\"line\">import java.io.FileInputStream;  </div><div class=\"line\">import java.io.FileReader;  </div><div class=\"line\">import java.io.IOException;  </div><div class=\"line\">import java.io.InputStream;  </div><div class=\"line\">import java.io.InputStreamReader;  </div><div class=\"line\">import java.io.RandomAccessFile;  </div><div class=\"line\">import java.io.Reader;  </div><div class=\"line\">public class ReadFromFile &#123;  </div><div class=\"line\">/** </div><div class=\"line\">* 以字节为单位读取文件，常用于读二进制文件，如图片、声音、影像等文件。 </div><div class=\"line\">* @param fileName 文件的名 </div><div class=\"line\">*/  </div><div class=\"line\">public static void readFileByBytes(String fileName)&#123;  </div><div class=\"line\">File file = new File(fileName);  </div><div class=\"line\">InputStream in = null;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以字节为单位读取文件内容，一次读一个字节：&quot;);  </div><div class=\"line\">// 一次读一个字节  </div><div class=\"line\">in = new FileInputStream(file);  </div><div class=\"line\">int tempbyte;  </div><div class=\"line\">while((tempbyte=in.read()) != -1)&#123;  </div><div class=\"line\">System.out.write(tempbyte);  </div><div class=\"line\">&#125;  </div><div class=\"line\">in.close();  </div><div class=\"line\">&#125; catch (IOException e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">return;  </div><div class=\"line\">&#125;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以字节为单位读取文件内容，一次读多个字节：&quot;);  </div><div class=\"line\">//一次读多个字节  </div><div class=\"line\">byte[] tempbytes = new byte[100];  </div><div class=\"line\">int byteread = 0;  </div><div class=\"line\">in = new FileInputStream(fileName);  </div><div class=\"line\">ReadFromFile.showAvailableBytes(in);  </div><div class=\"line\">//读入多个字节到字节数组中，byteread为一次读入的字节数  </div><div class=\"line\">while ((byteread = in.read(tempbytes)) != -1)&#123;  </div><div class=\"line\">System.out.write(tempbytes, 0, byteread);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125; catch (Exception e1) &#123;  </div><div class=\"line\">e1.printStackTrace();  </div><div class=\"line\">&#125; finally &#123;  </div><div class=\"line\">if (in != null)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">in.close();  </div><div class=\"line\">&#125; catch (IOException e1) &#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* 以字符为单位读取文件，常用于读文本，数字等类型的文件 </div><div class=\"line\">* @param fileName 文件名 </div><div class=\"line\">*/  </div><div class=\"line\">public static void readFileByChars(String fileName)&#123;  </div><div class=\"line\">File file = new File(fileName);  </div><div class=\"line\">Reader reader = null;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以字符为单位读取文件内容，一次读一个字节：&quot;);  </div><div class=\"line\">// 一次读一个字符  </div><div class=\"line\">reader = new InputStreamReader(new FileInputStream(file));  </div><div class=\"line\">int tempchar;  </div><div class=\"line\">while ((tempchar = reader.read()) != -1)&#123;  </div><div class=\"line\">//对于windows下，rn这两个字符在一起时，表示一个换行。  </div><div class=\"line\">//但如果这两个字符分开显示时，会换两次行。  </div><div class=\"line\">//因此，屏蔽掉r，或者屏蔽n。否则，将会多出很多空行。  </div><div class=\"line\">if (((char)tempchar) != &apos;r&apos;)&#123;  </div><div class=\"line\">System.out.print((char)tempchar);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">reader.close();  </div><div class=\"line\">&#125; catch (Exception e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以字符为单位读取文件内容，一次读多个字节：&quot;);  </div><div class=\"line\">//一次读多个字符  </div><div class=\"line\">char[] tempchars = new char[30];  </div><div class=\"line\">int charread = 0;  </div><div class=\"line\">reader = new InputStreamReader(new FileInputStream(fileName));  </div><div class=\"line\">//读入多个字符到字符数组中，charread为一次读取字符数  </div><div class=\"line\">while ((charread = reader.read(tempchars))!=-1)&#123;  </div><div class=\"line\">//同样屏蔽掉r不显示  </div><div class=\"line\">if ((charread == tempchars.length)&amp;&amp;(tempchars[tempchars.length-1] != &apos;r&apos;))&#123;  </div><div class=\"line\">System.out.print(tempchars);  </div><div class=\"line\">&#125;else&#123;  </div><div class=\"line\">for (int i=0; i&lt;charread; i++)&#123;  </div><div class=\"line\">if(tempchars[i] == &apos;r&apos;)&#123;  </div><div class=\"line\">continue;  </div><div class=\"line\">&#125;else&#123;  </div><div class=\"line\">System.out.print(tempchars[i]);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125; catch (Exception e1) &#123;  </div><div class=\"line\">e1.printStackTrace();  </div><div class=\"line\">&#125;finally &#123;  </div><div class=\"line\">if (reader != null)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">reader.close();  </div><div class=\"line\">&#125; catch (IOException e1) &#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* 以行为单位读取文件，常用于读面向行的格式化文件 </div><div class=\"line\">* @param fileName 文件名 </div><div class=\"line\">*/  </div><div class=\"line\">public static void readFileByLines(String fileName)&#123;  </div><div class=\"line\">File file = new File(fileName);  </div><div class=\"line\">BufferedReader reader = null;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;以行为单位读取文件内容，一次读一整行：&quot;);  </div><div class=\"line\">reader = new BufferedReader(new FileReader(file));  </div><div class=\"line\">String tempString = null;  </div><div class=\"line\">int line = 1;  </div><div class=\"line\">//一次读入一行，直到读入null为文件结束  </div><div class=\"line\">while ((tempString = reader.readLine()) != null)&#123;  </div><div class=\"line\">//显示行号  </div><div class=\"line\">System.out.println(&quot;line &quot; + line + &quot;: &quot; + tempString);  </div><div class=\"line\">line++;  </div><div class=\"line\">&#125;  </div><div class=\"line\">reader.close();  </div><div class=\"line\">&#125; catch (IOException e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125; finally &#123;  </div><div class=\"line\">if (reader != null)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">reader.close();  </div><div class=\"line\">&#125; catch (IOException e1) &#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* 随机读取文件内容 </div><div class=\"line\">* @param fileName 文件名 </div><div class=\"line\">*/  </div><div class=\"line\">public static void readFileByRandomAccess(String fileName)&#123;  </div><div class=\"line\">RandomAccessFile randomFile = null;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;随机读取一段文件内容：&quot;);  </div><div class=\"line\">// 打开一个随机访问文件流，按只读方式  </div><div class=\"line\">randomFile = new RandomAccessFile(fileName, &quot;r&quot;);  </div><div class=\"line\">// 文件长度，字节数  </div><div class=\"line\">long fileLength = randomFile.length();  </div><div class=\"line\">// 读文件的起始位置  </div><div class=\"line\">int beginIndex = (fileLength &gt; 4) ? 4 : 0;  </div><div class=\"line\">//将读文件的开始位置移到beginIndex位置。  </div><div class=\"line\">randomFile.seek(beginIndex);  </div><div class=\"line\">byte[] bytes = new byte[10];  </div><div class=\"line\">int byteread = 0;  </div><div class=\"line\">//一次读10个字节，如果文件内容不足10个字节，则读剩下的字节。  </div><div class=\"line\">//将一次读取的字节数赋给byteread  </div><div class=\"line\">while ((byteread = randomFile.read(bytes)) != -1)&#123;  </div><div class=\"line\">System.out.write(bytes, 0, byteread);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125; catch (IOException e)&#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125; finally &#123;  </div><div class=\"line\">if (randomFile != null)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">randomFile.close();  </div><div class=\"line\">&#125; catch (IOException e1) &#123;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* 显示输入流中还剩的字节数 </div><div class=\"line\">* @param in </div><div class=\"line\">*/  </div><div class=\"line\">private static void showAvailableBytes(InputStream in)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">System.out.println(&quot;当前字节输入流中的字节数为:&quot; + in.available());  </div><div class=\"line\">&#125; catch (IOException e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">public static void main(String[] args) &#123;  </div><div class=\"line\">String fileName = &quot;C:/temp/newTemp.txt&quot;;  </div><div class=\"line\">ReadFromFile.readFileByBytes(fileName);  </div><div class=\"line\">ReadFromFile.readFileByChars(fileName);  </div><div class=\"line\">ReadFromFile.readFileByLines(fileName);  </div><div class=\"line\">ReadFromFile.readFileByRandomAccess(fileName);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"二、将内容追加到文件尾部\"><a href=\"#二、将内容追加到文件尾部\" class=\"headerlink\" title=\"二、将内容追加到文件尾部\"></a>二、将内容追加到文件尾部</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">import java.io.FileWriter;  </div><div class=\"line\">import java.io.IOException;  </div><div class=\"line\">import java.io.RandomAccessFile;  </div><div class=\"line\">/** </div><div class=\"line\">* 将内容追加到文件尾部 </div><div class=\"line\">*/  </div><div class=\"line\">public class AppendToFile &#123;  </div><div class=\"line\">/** </div><div class=\"line\">* A方法追加文件：使用RandomAccessFile </div><div class=\"line\">* @param fileName 文件名 </div><div class=\"line\">* @param content 追加的内容 </div><div class=\"line\">*/  </div><div class=\"line\">public static void appendMethodA(String fileName,  </div><div class=\"line\">  </div><div class=\"line\">String content)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">// 打开一个随机访问文件流，按读写方式  </div><div class=\"line\">RandomAccessFile randomFile = new RandomAccessFile(fileName, &quot;rw&quot;);  </div><div class=\"line\">// 文件长度，字节数  </div><div class=\"line\">long fileLength = randomFile.length();  </div><div class=\"line\">//将写文件指针移到文件尾。  </div><div class=\"line\">randomFile.seek(fileLength);  </div><div class=\"line\">randomFile.writeBytes(content);  </div><div class=\"line\">randomFile.close();  </div><div class=\"line\">&#125; catch (IOException e)&#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">/** </div><div class=\"line\">* B方法追加文件：使用FileWriter </div><div class=\"line\">* @param fileName </div><div class=\"line\">* @param content </div><div class=\"line\">*/  </div><div class=\"line\">public static void appendMethodB(String fileName, String content)&#123;  </div><div class=\"line\">try &#123;  </div><div class=\"line\">//打开一个写文件器，构造函数中的第二个参数true表示以追加形式写文件  </div><div class=\"line\">FileWriter writer = new FileWriter(fileName, true);  </div><div class=\"line\">writer.write(content);  </div><div class=\"line\">writer.close();  </div><div class=\"line\">&#125; catch (IOException e) &#123;  </div><div class=\"line\">e.printStackTrace();  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;  </div><div class=\"line\">public static void main(String[] args) &#123;  </div><div class=\"line\">String fileName = &quot;C:/temp/newTemp.txt&quot;;  </div><div class=\"line\">String content = &quot;new append!&quot;;  </div><div class=\"line\">//按方法A追加文件  </div><div class=\"line\">AppendToFile.appendMethodA(fileName, content);  </div><div class=\"line\">AppendToFile.appendMethodA(fileName, &quot;append end. n&quot;);  </div><div class=\"line\">//显示文件内容  </div><div class=\"line\">ReadFromFile.readFileByLines(fileName);  </div><div class=\"line\">//按方法B追加文件  </div><div class=\"line\">AppendToFile.appendMethodB(fileName, content);  </div><div class=\"line\">AppendToFile.appendMethodB(fileName, &quot;append end. n&quot;);  </div><div class=\"line\">//显示文件内容  </div><div class=\"line\">ReadFromFile.readFileByLines(fileName);  </div><div class=\"line\">&#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"http://blog.csdn.net/smartcat86/article/details/4085739\">来源</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cixiqkb0h00021ou7ysu0hx7n","category_id":"cixiqkb0u00061ou7ljal1uoa","_id":"cixiqkb1k000f1ou71v8livb0"},{"post_id":"cixiqkb0n00041ou70592xae8","category_id":"cixiqkb0u00061ou7ljal1uoa","_id":"cixiqkb1x000l1ou7tjf16ub7"},{"post_id":"cixiqkb1300081ou7ok4v121n","category_id":"cixiqkb0u00061ou7ljal1uoa","_id":"cixiqkb25000q1ou73s819o55"},{"post_id":"cixiqkb1x000m1ou7smgrsmfl","category_id":"cixiqkb0u00061ou7ljal1uoa","_id":"cixiqkb27000s1ou71zydyaru"},{"post_id":"cixiqkb1e000e1ou78f30gzs8","category_id":"cixiqkb28000v1ou7u88lk7lz","_id":"cixiqkb2e00101ou7okblu3hr"},{"post_id":"cixiqkb1m000g1ou7itmczqo2","category_id":"cixiqkb29000x1ou7jlqr43dt","_id":"cixiqkb2l00141ou7dj74s20i"},{"post_id":"cixiqkb1s000j1ou7zuiektgz","category_id":"cixiqkb1z000n1ou7et1tywn6","_id":"cixiqkb2s00181ou72b4qbmlc"},{"post_id":"cixiqkb1500091ou78hglg6as","category_id":"cixiqkb1z000n1ou7et1tywn6","_id":"cixiqkb2y001d1ou7lbn6gpwu"},{"post_id":"cixiqkb1500091ou78hglg6as","category_id":"cixiqkb2m00151ou7djonuknl","_id":"cixiqkb2y001e1ou7v8gbhvsm"},{"post_id":"cixiqkb18000a1ou7urelcc1d","category_id":"cixiqkb26000r1ou764ufakwc","_id":"cixiqkb2z001g1ou77akkre58"},{"post_id":"cixiqkb18000a1ou7urelcc1d","category_id":"cixiqkb2t00191ou7eax3k3or","_id":"cixiqkb30001h1ou79hoznv9z"}],"PostTag":[{"post_id":"cixiqkb0h00021ou7ysu0hx7n","tag_id":"cixiqkb1200071ou7kwcqixom","_id":"cixiqkb1d000d1ou769kk5urp"},{"post_id":"cixiqkb0n00041ou70592xae8","tag_id":"cixiqkb1a000c1ou7qjhhoumh","_id":"cixiqkb1u000k1ou7w6l0dm7e"},{"post_id":"cixiqkb1300081ou7ok4v121n","tag_id":"cixiqkb1r000i1ou7zre37x7i","_id":"cixiqkb25000p1ou7qavezb4j"},{"post_id":"cixiqkb1500091ou78hglg6as","tag_id":"cixiqkb21000o1ou7cv09k1qe","_id":"cixiqkb27000u1ou7xbsxqt6y"},{"post_id":"cixiqkb18000a1ou7urelcc1d","tag_id":"cixiqkb27000t1ou7zbiwo2fo","_id":"cixiqkb2e000z1ou7qapyq79b"},{"post_id":"cixiqkb18000a1ou7urelcc1d","tag_id":"cixiqkb29000w1ou7kmbp6kim","_id":"cixiqkb2h00121ou7x40bbue9"},{"post_id":"cixiqkb1e000e1ou78f30gzs8","tag_id":"cixiqkb2a000y1ou7bayfd8h0","_id":"cixiqkb2q00171ou765h61dtl"},{"post_id":"cixiqkb1e000e1ou78f30gzs8","tag_id":"cixiqkb27000t1ou7zbiwo2fo","_id":"cixiqkb2v001a1ou7z7mrd1f8"},{"post_id":"cixiqkb1s000j1ou7zuiektgz","tag_id":"cixiqkb2o00161ou78dtb1xdi","_id":"cixiqkb2x001c1ou71n8f1oi9"},{"post_id":"cixiqkb1x000m1ou7smgrsmfl","tag_id":"cixiqkb2w001b1ou7p31z9q9m","_id":"cixiqkb2z001f1ou7n05b61qc"}],"Tag":[{"name":"Java反射","_id":"cixiqkb1200071ou7kwcqixom"},{"name":"Java多态","_id":"cixiqkb1a000c1ou7qjhhoumh"},{"name":"log4j日志框架","_id":"cixiqkb1r000i1ou7zre37x7i"},{"name":"JVM","_id":"cixiqkb21000o1ou7cv09k1qe"},{"name":"Hexo教程","_id":"cixiqkb27000t1ou7zbiwo2fo"},{"name":"Markdown语法","_id":"cixiqkb29000w1ou7kmbp6kim"},{"name":"Markdown插件","_id":"cixiqkb2a000y1ou7bayfd8h0"},{"name":"Vim","_id":"cixiqkb2o00161ou78dtb1xdi"},{"name":"java文件读写","_id":"cixiqkb2w001b1ou7p31z9q9m"}]}}